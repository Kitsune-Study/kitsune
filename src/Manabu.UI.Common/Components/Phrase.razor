@using Corelibs.Basic.Blocks;
@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Conversations;
@using Manabu.UseCases.Lessons;
@using Manabu.UseCases.Phrases;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_phrase is null) { return; }

<MudStack Class="lesson">
    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <TextField 
        Label="Original"
        IsReadonly=@(!_isEdit)
        Value=@_phrase.Original 
        OnEdit=@OnOriginalEdit />

    <EditableList
        Name="Translations"
        IsReadonly=@(!_isEdit)
        TreeItems=@_translationTreeItems
        OnAddItem=@OnAddItem
        MenuItemsRoot=@TranslationMenuItemsRoot
        MenuItemsForAll=@TranslationMenuItems
        NoIndents=true />

    @if (_isEdit || !_contextTreeItems.IsNullOrEmpty())
    {
        <EditableList
            Name="Contexts"
            IsReadonly=@(!_isEdit)
            TreeItems=@_contextTreeItems
            OnAddItem=@OnAddItem
            NoIndents=true />
    }

    @if (_isEdit || !_audioTreeItems.IsNullOrEmpty())
    {
        <EditableList
            Name="Audios"
            IsReadonly=@(!_isEdit)
            TreeItems=@_audioTreeItems
            OnAddItem=@OnAddItem
            NoIndents=true />
    }

    @if (_isEdit || !_wordTreeItems.IsNullOrEmpty())
    {
        <EditableList
            Name="Words"
            IsReadonly=@(!_isEdit)
            TreeItems=@_wordTreeItems
            OnAddItem=@OnAddItem
            NoIndents=true />
    }

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string PhraseId { get; set; }

    private List<EditableList.TreeItemData> _wordTreeItems;
    private List<EditableList.TreeItemData> _translationTreeItems;
    private List<EditableList.TreeItemData> _contextTreeItems;
    private List<EditableList.TreeItemData> _audioTreeItems;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private PhraseDetailsDTO? _phrase;
    private List<List<List.ListItem>>? _listItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        await RefreshViewModel();

        if (_phrase is null)
            return;

        //_breadcrumbs.Add(new("Courses", href: "/courses"));
        //_breadcrumbs.Add(new(_conversation.Courses[0].Name, href: $"/courses/{_conversation.Courses[0].Id}"));
        //_breadcrumbs.Add(new("Conversations", "", disabled: true));
        //_breadcrumbs.Add(new(_conversation.Name, href: _conversation.Id));
    }

    private async Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, EditableList.MenuItem menuItem)
    {
        if (!_isAdmin)
            return false;

        if (menuItem.IdSecondary == "addTranslation")
            await ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new UpdatePhraseCommand(_phrase.Id, Translations: _translationTreeItems.Select(i => i.Name).ToArray())));

        return await RefreshView();
    }

    private Task<bool> OnOriginalEdit(string original) =>
         ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new UpdatePhraseCommand(_phrase.Id, original)));

    private async Task<bool> ExecuteAdminViewAction(Func<Task<Result>> action)
    {
        if (!_isAdmin)
            return false;

        var result = await action();

        await RefreshView();

        return result.IsSuccess;
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetPhraseQuery, GetPhraseQueryResponse>(
            new GetPhraseQuery(PhraseId));

        _phrase = response?.Content;

        _translationTreeItems = _phrase?.Translations?.SelectOrDefault(t =>
            new EditableList.TreeItemData(t, t, "translation")).ToList();

        _contextTreeItems = _phrase?.Contexts?.SelectOrDefault(c =>
            new EditableList.TreeItemData(c, c, "context")).ToList();
    }

    private EditableList.MenuItem[] TranslationMenuItemsRoot = new EditableList.MenuItem[]
    {
        EditableList.MenuItems.AddChildAsLast with { Name = "Add Translation", IdSecondary = "addTranslation"},
        EditableList.MenuItems.AddChildAsFirst with { Name = "Add Translation at Start", IdSecondary = "addTranslation" },
    };

    private EditableList.MenuItem[] TranslationMenuItems = new EditableList.MenuItem[]
    {
        EditableList.MenuItems.AddSibling with { Name = "Add Translation", IdSecondary = "addTranslation"},
    };
}
