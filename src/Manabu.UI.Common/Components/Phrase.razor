@using Corelibs.Basic.Blocks;
@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Corelibs.Basic.Storage;
@using Manabu.Entities.Audios;
@using Manabu.UseCases.Conversations;
@using Manabu.UseCases.Lessons;
@using Manabu.UseCases.Phrases;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Forms;

@inherits CoreComponent

@if (_phrase is null) { return; }

<MudStack Class="main-section phrase" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <TextField 
        Label="Original"
        IsReadonly=@(!_isEdit)
        Value=@_phrase.Original 
        OnEdit=@OnOriginalEdit />

    <EditableList
        Name="Translations"
        IsReadonly=@(!_isEdit)
        TreeItems=@_translationTreeItems
        OnAddItem=@OnAddTranslation
        OnRemoveItem=@OnRemoveTranslation
        OnMoveItem=@OnMoveTranslation
        MenuItemsRoot=@TranslationMenuItemsRoot
        MenuItemsForAll=@TranslationMenuItems
        NoIndents=true />

    @if (_isEdit || !_contextTreeItems.IsNullOrEmpty())
    {
        <EditableList
            Name="Contexts"
            IsReadonly=@(!_isEdit)
            TreeItems=@_contextTreeItems
            NoIndents=true />
    }

    @if (_isEdit || !_audioTreeItems.IsNullOrEmpty())
    {
        <EditableList
            Name="Audios"
            IsReadonly=@(!_isEdit)
            TreeItems=@_audioTreeItems
            MenuItemsForAll=@AudioMenuItems
            OnRemoveItem=@OnRemoveAudio
            NoIndents=true>

            <CustomItemTemplate>
                <audio controls style="padding-bottom: 10px;" class="audio">
                    <source class="audio-source"  src=@($"{AudioStorage.BaseReadPath}/{context.Name}") type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
            </CustomItemTemplate>

        </EditableList>

        @if (_isEdit)
        {
            <FileUpload OnUpload=@OnAudioUpload />
        }
    }

    @if (_isEdit || !_wordTreeItems.IsNullOrEmpty())
    {
        <EditableList
            Name="Words"
            IsReadonly=@(!_isEdit)
            TreeItems=@_wordTreeItems
            NoIndents=true />
    }

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string PhraseId { get; set; }

    private List<EditableList.TreeItemData> _wordTreeItems;
    private List<EditableList.TreeItemData> _translationTreeItems;
    private List<EditableList.TreeItemData> _contextTreeItems;
    private List<EditableList.TreeItemData> _audioTreeItems;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private PhraseDetailsDTO? _phrase;

    [Inject] public IMediaStorage<Audio> AudioStorage { get; set; }   
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private async Task<Result> OnAudioUpload(IBrowserFile file)
    {
        var originalFileName = file.Name;
        var res = await AudioStorage.Save((maxSize, ct) => file.OpenReadStream(1024*1024*10, ct), originalFileName);
        if (res.Item1.IsSuccess)
            await ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new AddPhraseAudioCommand(_phrase.Id, res.Item2)));

        return res.Item1;
    }

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("PHRASE");
        
        await RefreshViewModel();

        if (_phrase is null)
            return;

        //_breadcrumbs.Add(new("Courses", href: "/courses"));
        //_breadcrumbs.Add(new(_conversation.Courses[0].Name, href: $"/courses/{_conversation.Courses[0].Id}"));
        //_breadcrumbs.Add(new("Conversations", "", disabled: true));
        //_breadcrumbs.Add(new(_conversation.Name, href: _conversation.Id));
    }

    private Task<bool> OnOriginalEdit(string original) =>
         ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new UpdatePhraseCommand(_phrase.Id, original)));

    #region Translations

    private MenuItem[] TranslationMenuItemsRoot = new MenuItem[]
    {
        MenuItems.AddChildAsLast,
        MenuItems.AddChildAsFirst,
    };

    private MenuItem[] TranslationMenuItems = new MenuItem[]
    {
        MenuItems.AddSibling,
        MenuItems.MoveDown,
        MenuItems.MoveUp,
        MenuItems.Remove,
    };

    private Task<bool> OnAddTranslation(
        EditableList.TreeItemData item, int index, MenuItem menuItem) =>
            ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new UpdatePhraseCommand(_phrase.Id, Translations: _translationTreeItems.Select(i => i.Name).ToArray())));

    private async Task OnRemoveTranslation(EditableList.TreeItemData item, MenuItem menuItem) =>
        await ExecuteAdminViewAction(() => CommandExecutor.Execute(
            new UpdatePhraseCommand(_phrase.Id, Translations: _translationTreeItems.Select(i => i.Name).ToArray())));

    private Task<bool> OnMoveTranslation(
        EditableList.TreeItemData item, int index, MenuItem menuItem) =>
            ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new UpdatePhraseCommand(_phrase.Id, Translations: _translationTreeItems.Select(i => i.Name).ToArray())));

    #endregion

    #region Contexts

    private Task<bool> OnAddContext(
        EditableList.TreeItemData item, int index, MenuItem menuItem) =>
            ExecuteAdminViewAction(() => CommandExecutor.Execute(
                new UpdatePhraseCommand(_phrase.Id, Contexts: _contextTreeItems.Select(i => i.Name).ToArray())));

    private async Task OnRemoveContext(EditableList.TreeItemData item, MenuItem menuItem) =>
        await ExecuteAdminViewAction(() => CommandExecutor.Execute(
            new UpdatePhraseCommand(_phrase.Id, Translations: _contextTreeItems.Select(i => i.Name).ToArray())));

    private MenuItem[] ContextsMenuItemsRoot = new MenuItem[]
    {
        MenuItems.AddChildAsLast,
        MenuItems.AddChildAsFirst,
    };

    private MenuItem[] ContextsMenuItems = new MenuItem[]
    {
        MenuItems.AddSibling,
        MenuItems.MoveDown,
        MenuItems.MoveUp,
        MenuItems.Remove,
    };

    #endregion

    #region Audios

    private async Task OnRemoveAudio(EditableList.TreeItemData item, MenuItem menuItem)
    {
        var result = await AudioStorage.Delete(item.Name);
        if (!result.IsSuccess)
            return;

        await ExecuteAdminViewAction(() => CommandExecutor.Execute(
            new RemovePhraseAudioCommand(_phrase.Id, item.Id)));
    }

    private MenuItem[] AudioMenuItems = new MenuItem[]
    {
        MenuItems.Remove,
    };

    #endregion
    
    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetPhraseQuery, GetPhraseQueryResponse>(
            new GetPhraseQuery(PhraseId));

        _phrase = response?.Content;

        _translationTreeItems = _phrase?.Translations?.SelectOrDefault(t =>
            new EditableList.TreeItemData(t, t, "translation")).ToList();

        _contextTreeItems = _phrase?.Contexts?.SelectOrDefault(c =>
            new EditableList.TreeItemData(c, c, "context")).ToList();

        _audioTreeItems = _phrase?.Audios?.SelectOrDefault(a =>
            new EditableList.TreeItemData(a.Id, a.Href, "audio")).ToList();
    }
}
