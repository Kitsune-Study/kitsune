@using Corelibs.Basic.Reflection;
@using Manabu.UseCases.Courses;
@using Microsoft.AspNetCore.Components.Authorization;

<div class="grid-1x2f">

    <div class="v-list">
        @if (_course is not null)
        {
            <List Title=@_course.Name
                  TitleEdit=true
                  OnTitleEdit=@OnTitleEdit
                  Description=@(_course.Description ?? "No Description")
                  DescriptionEdit=true
                  OnDescriptionEdit=@OnDescriptionEdit
                  DropdownModel=null    />
        }

        @{
            var listItems = _course?.Modules?.SelectOrDefault((m, i) =>
                new List.ListItem($"m{i}", m.Name, "module", m.Lessons?.SelectOrDefault(l =>
                    new List.ListItem(l.Id, l.Name, "lesson")).ToList())).ToList();

            <List Title="Modules"
              ListItems=@listItems
              ItemsDropdownModel=@ModulesDropdownModel
              OnAddItemOnTop=@OnAddItem
              OnMenuOptionSelected=@OnWorkoutPlansListDropdownOptionSelected
              OnItemClick=@OnItemClick />
        }

    </div>
    @*<div class="v-list">
        <DropdownWithLabel 
            Title="Ownership"
            Model=@OwnershipFilterDropdownModel 
            OnOptionSelected=OnOwnershipFilterDropdownModelOptionSelected />
    </div>*@
</div>

@code {
    [Inject] public IQueryExecutor QueryExecutor { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider Auth { get; set; }

    [Parameter] public string CourseId { get; set; }

    private CourseDetailsDTO? _course;
    private List<List<List.ListItem>>? _listItems;

    protected override async Task OnInitializedAsync()
    {
        await RefreshViewModel();
    }

    private async Task<bool> OnWorkoutPlansListDropdownOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnOwnershipFilterDropdownModelOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnAddItem(string name, string parentId, string parentType)
    {
        if (!await Auth.IsAdmin())
            return false;

        if (parentType.IsNullOrEmpty())
            return await ExecuteUpdateCommand(() => _course with { Modules = _course.Modules.Append(new(name)).ToArray() });
        else
        {
            var mi = int.Parse(parentId.TrimStart('m'));
            return await ExecuteUpdateCommand(() => 
                _course with { Modules = _course.Modules?.SelectOrDefault((m, i) =>
                        i != mi ? m : m with { Lessons = m.Lessons?.Append(new("", name)).ToArray() }).ToArray()
                    });
        }

        return true;
    }

    private Task<bool> OnTitleEdit(string id, string name, string? parentType = null) =>
        ExecuteUpdateCommand(() => _course with { Name = name });

    private Task<bool> OnDescriptionEdit(string id, string description, string? parentType = null) =>
        ExecuteUpdateCommand(() => _course with { Description = description });

    private async Task OnItemClick(string id, string type)
    {
        //Navigation.NavigateTo($"courses/{id}");
    }

    private async Task<bool> ExecuteUpdateCommand(Func<CourseDetailsDTO> createDto)
    {
        if (!await Auth.IsAdmin())
            return false;

        var dto = createDto();
        await CommandExecutor.Execute(new UpdateCourseCommand(
            dto.Id, dto.Name, dto.Description, dto.Modules));

        await RefreshView();
        return true;
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetCourseQuery, GetCourseQueryResponse>(
            new GetCourseQuery(CourseId));

        _course = response?.Course;
        _listItems = _course?.Modules?.Select(m => new List<List.ListItem>(
            m.Lessons?.SelectOrDefault(l => new List.ListItem(l.Id, l.Name)).ToList()))?.ToList();
    }

    private static Dropdown.ViewModel ModulesDropdownModel = new(
        Options: new()
        {
            new("add", "Add"),
        },
        Trigger: new(IsFixed: true, Value: "Menu", Mode: Dropdown.Mode.Component)
    );

    private Dropdown.ViewModel OwnershipFilterDropdownModel = new(
        Options: new()
        {
            "Own",
            "Public",
            "All"
        },
        Trigger: new(BgOn: true)
    );
}
