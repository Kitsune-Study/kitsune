@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Courses;
@using Manabu.UseCases.Lessons;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_course is null) { return; }

<MudStack Class="course">
    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <MudStack>
        <TextField 
            Label="Name"
            IsReadonly=@(!_isEdit)
            Value=@_course.Name 
            OnEdit=@OnNameEdit />

        <TextField 
            Label="Description"
            IsReadonly=@(!_isEdit)
            Value=@GetDescription() 
            OnEdit=@OnDescriptionEdit />

    </MudStack>

    <MudPaper Class="py-4" Elevation="0">
        <EditableList 
            Name="Lessons"
            IsReadonly=@(!_isEdit)
            TreeItems=@_lessonsTreeItems 
            OnAddItem=@OnAddItem 
            OnItemClick=OnItemClick
            MenuItemsRoot=@MenuItemsRoot
            MenuItemsPerType=@MenuItemsPerType 
            OnRemoveItem=@OnRemoveFromModuleItems/>
    </MudPaper>

    @if (_isEdit)
    {
        <MudPaper Class="py-4" Elevation="0">
            <EditableList Name="Lessons Removed"
                          TreeItems=@_lessonsRemovedTreeItems
                          MenuItemsPerType=@LessonsRemoved_MenuItemsPerType
                          OnMenuItemClick=@OnRemovedLessonsMenuItemClick />
        </MudPaper>
    }

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string CourseId { get; set; }

    private List<EditableList.TreeItemData> _lessonsTreeItems;
    private List<EditableList.TreeItemData> _lessonsRemovedTreeItems;
    private List<EditableList.TreeItemData> _modulesRemovedTreeItems;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private CourseDetailsDTO? _course;
    private List<List<List.ListItem>>? _listItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        await RefreshViewModel();

        if (_course is null)
            return;

        _breadcrumbs.Add(new("Courses", href: "/courses"));
        _breadcrumbs.Add(new($"{_course.Name}", href: $"/courses/{_course?.Id}"));
    }

    private async Task<bool> OnNameEdit(string text)
    {
        return await ExecuteUpdateCommand(() => _course with { Name = text });
    }

    private async Task<bool> OnDescriptionEdit(string text)
    {
        return await ExecuteUpdateCommand(() => _course with { Description = text });
    }

    private async Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, EditableList.MenuItem menuItem)
    {
        if (!_isAdmin)
            return false;

        if (menuItem.IdSecondary == "addModule")
        {
            var result = await CommandExecutor.Execute(
                new CreateModuleCommand(_course.Id, item.Name, index));
        }
        else
        if (menuItem.IdSecondary == "addLesson")
        {
            var treeItems = item.Parent?.Parent?.TreeItems ?? _lessonsTreeItems;
            var moduleIndex = treeItems.IndexOf(item.Parent);
            var result = await CommandExecutor.Execute(
                new CreateLessonCommand(item.Name, _course.Id, moduleIndex, index));
        }

        return await RefreshView();
    }

    private async Task<bool> OnRemoveFromModuleItems(EditableList.TreeItemData item, EditableList.MenuItem menuItem)
    {
        if (menuItem.IdSecondary == "removeLesson")
            await CommandExecutor.Execute(new RemoveLessonCommand(item.Id, _course.Id));

        return await RefreshView();
    }

    private async Task<bool> OnRemovedLessonsMenuItemClick(EditableList.TreeItemData item, EditableList.MenuItem menuItem)
    {
        if (item.Type == "lesson" && menuItem.Id == "restore")
            await CommandExecutor.Execute(new RestoreLessonCommand(item.Id, _course.Id));

        return await RefreshView();
    }

    private Task<bool> OnTitleEdit(string id, string name, string? parentType = null) =>
        ExecuteUpdateCommand(() => _course with { Name = name });

    private Task<bool> OnDescriptionEdit(string id, string description, string? parentType = null) =>
        ExecuteUpdateCommand(() => _course with { Description = description });

    private async Task OnItemClick(EditableList.TreeItemData item)
    {
        Navigation.NavigateTo($"lessons/{item.Id}");
    }

    private async Task<bool> ExecuteUpdateCommand(Func<CourseDetailsDTO> createDto)
    {
        if (!_isAdmin)
            return false;

        var dto = createDto();
        await CommandExecutor.Execute(new UpdateCourseCommand(
            dto.Id, dto.Name, dto.Description));

        await RefreshView();

        return true;
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetCourseQuery, GetCourseQueryResponse>(
            new GetCourseQuery(CourseId));

        _course = response?.Course;

        _lessonsTreeItems = _course?.Modules?.SelectOrDefault((m, i) =>
            new EditableList.TreeItemData($"m{i}", m.Name, "module", m.Lessons.SelectOrDefault(l =>
                new EditableList.TreeItemData(l.Id, l.Name, "lesson")).ToList(), isExpanded: true)).ToList() ?? new();

        _lessonsRemovedTreeItems = _course?.LessonsRemoved?.SelectOrDefault((l, i) =>
               new EditableList.TreeItemData(l.Id, l.Name, "lesson")).ToList() ?? new();

        _modulesRemovedTreeItems = _course?.ModulesRemoved?.SelectOrDefault((m, i) =>
            new EditableList.TreeItemData($"m{i}", m.Name, "module", m.Lessons.SelectOrDefault(l =>
                new EditableList.TreeItemData(l.Id, l.Name, "lesson")).ToList())).ToList() ?? new();
    }

    private string GetDescription() =>
        !_course.Description.IsNullOrEmpty() ?
            _course.Description :
            "No Description";

    private Dictionary<string, EditableList.MenuItem[]> MenuItemsPerType = new()
    {
        { 
            "module", 
            new EditableList.MenuItem[]
            {
                EditableList.MenuItems.AddChildAsLast with { Name = "Add Lesson", IdSecondary = "addLesson"},
                EditableList.MenuItems.AddChildAsFirst with { Name = "Add Lesson at Start", IdSecondary = "addLesson" },
                EditableList.MenuItems.AddSibling with { Name = "Add Module", IdSecondary = "addModule"},
            }
        },
        {
            "lesson",
            new EditableList.MenuItem[]
            {
                EditableList.MenuItems.AddSibling with { Name = "Add Lesson", IdSecondary = "addLesson"},
                EditableList.MenuItems.Remove with { Name = "Remove", IdSecondary = "removeLesson"},
            }
        }
    };

    private EditableList.MenuItem[] MenuItemsRoot = new EditableList.MenuItem[]
    {
        EditableList.MenuItems.AddChildAsLast with { Name = "Add Module", IdSecondary = "addModule"},
        EditableList.MenuItems.AddChildAsFirst with { Name = "Add Module at Start", IdSecondary = "addModule" },
    };

    private Dictionary<string, EditableList.MenuItem[]> LessonsRemoved_MenuItemsPerType = new()
    {
        {
            "lesson",
            new EditableList.MenuItem[]
            {
                new("restore", "Restore")
            }
        }
    };

    private Dictionary<string, EditableList.MenuItem[]> ModulesRemoved_MenuItemsPerType = new()
    {
        {
            "module",
            new EditableList.MenuItem[]
            {
                new("restore", "Restore")
            }
        }
    };
}
