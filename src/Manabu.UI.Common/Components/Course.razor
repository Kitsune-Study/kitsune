@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Courses;
@using Microsoft.AspNetCore.Components.Authorization;

<MudStack>
    <MudBreadcrumbs Items="_items" Style="padding-left: 0; font-size: 12px" />
    <MudStack>
        <MudField Label="Name" Variant="Variant.Text" DisableUnderLine=true
            Style="font-weight: bold">
            Yuta Vocab Course
        </MudField>
        <MudField Label="Description" Variant="Variant.Text" DisableUnderLine=true Style="font-weight: bold">
            No Description
        </MudField>
    </MudStack>
    <MudPaper Class="py-4" Elevation="0">
        <MudText Class="pl-4 mb-2" Style="font-size: 12px">Lessons</MudText>

        <EditableList 
            TreeItems=@TreeItems 
            OnAddItem=@OnAddItem 
            MenuItemsPerType=@MenuItemsPerType />

    </MudPaper>
</MudStack>

@code {
    private List<EditableList.TreeItemData> TreeItems { get; set; } 

    private Dictionary<string, EditableList.MenuItem[]> MenuItemsPerType = new()
    {
        { 
            "module", 
            new EditableList.MenuItem[]
            {
                EditableList.MenuItems.AddChildAsLast with { Name = "Add Lesson", IdSecondary = "addLesson"},
                EditableList.MenuItems.AddChildAsFirst with { Name = "Add Lesson at Start", IdSecondary = "addLesson" },
                EditableList.MenuItems.AddSibling with { Name = "Add Module", IdSecondary = "addModule"},
            }
        },
        {
            "lesson",
            new EditableList.MenuItem[]
            {
                EditableList.MenuItems.AddSibling with { Name = "Add Lesson", IdSecondary = "addLesson"},
            }
        }
    };

    private List<BreadcrumbItem> _items = new()
    {
        new("Courses", href: "#"),
        new("Yuta Vocab Course", href: "#"),
    };

    [Inject] public IQueryExecutor QueryExecutor { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider Auth { get; set; }

    [Parameter] public string CourseId { get; set; }

    private CourseDetailsDTO? _course;
    private List<List<List.ListItem>>? _listItems;

    private async Task OnItemClick(MouseEventArgs args)
    {

    }

    private async Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, EditableList.MenuItem menuItem)
    {
        if (!await Auth.IsAdmin())
            return false;

        if (menuItem.IdSecondary == "addModule")
        {
            return await ExecuteUpdateCommand(() => _course with { Modules = _course.Modules.InsertOrDefault(index, new(item.Name)).ToArray() });
        }
        else
        if (menuItem.IdSecondary == "addLesson")
        {
            var mi = int.Parse(item.Parent.Id.TrimStart('m'));
            return await ExecuteUpdateCommand(() =>
                _course with
                    {
                        Modules = _course.Modules?.SelectOrDefault((m, i) =>
                        i != mi ? m : m with
                        {
                            Lessons = m.Lessons?.InsertOrDefault(index,new("", item.Name)).ToArray()
                        }).ToArray()
                    });
        }

        //if (!item.Parent || item.Parent.Type.IsNullOrEmpty())
        //    return await ExecuteUpdateCommand(() => _course with { Modules = _course.Modules.Append(new(item.Name)).ToArray() });
        //else
        //{
           
        //}

        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshViewModel();
    }

    private async Task<bool> OnWorkoutPlansListDropdownOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnOwnershipFilterDropdownModelOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnAddItem(string name, string parentId, string parentType)
    {
        if (!await Auth.IsAdmin())
            return false;

        if (parentType.IsNullOrEmpty())
            return await ExecuteUpdateCommand(() => _course with { Modules = _course.Modules.Append(new(name)).ToArray() });
        else
        {
            var mi = int.Parse(parentId.TrimStart('m'));
            return await ExecuteUpdateCommand(() => 
                _course with { Modules = _course.Modules?.SelectOrDefault((m, i) =>
                        i != mi ? m : m with { Lessons = m.Lessons?.Append(new("", name)).ToArray() }).ToArray()
                    });
        }

        return true;
    }

    private Task<bool> OnTitleEdit(string id, string name, string? parentType = null) =>
        ExecuteUpdateCommand(() => _course with { Name = name });

    private Task<bool> OnDescriptionEdit(string id, string description, string? parentType = null) =>
        ExecuteUpdateCommand(() => _course with { Description = description });

    private async Task OnItemClick(string id, string type)
    {
        //Navigation.NavigateTo($"courses/{id}");
    }

    private async Task<bool> ExecuteUpdateCommand(Func<CourseDetailsDTO> createDto)
    {
        if (!await Auth.IsAdmin())
            return false;

        var dto = createDto();
        await CommandExecutor.Execute(new UpdateCourseCommand(
            dto.Id, dto.Name, dto.Description, dto.Modules));

        await RefreshView();
        return true;
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetCourseQuery, GetCourseQueryResponse>(
            new GetCourseQuery(CourseId));

        _course = response?.Course;
        //TreeItems.Add(new TreeItemData("All Mail"));
        TreeItems = _course?.Modules?.SelectOrDefault((m, i) =>
            new EditableList.TreeItemData($"m{i}", m.Name, "module", m.Lessons.SelectOrDefault(l =>
                new EditableList.TreeItemData(l.Id, l.Name, "lesson")).ToList(), isExpanded: true)).ToList();
    }

    private static Dropdown.ViewModel ModulesDropdownModel = new(
        Options: new()
        {
            new("add", "Add"),
        },
        Trigger: new(IsFixed: true, Value: "Menu", Mode: Dropdown.Mode.Component)
    );

    private Dropdown.ViewModel OwnershipFilterDropdownModel = new(
        Options: new()
        {
            "Own",
            "Public",
            "All"
        },
        Trigger: new(BgOn: true)
    );
}
