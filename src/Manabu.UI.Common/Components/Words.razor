@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.Words;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

<MudStack Class="main-section vocabulary" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <MudDataGrid @ref=@_mudDataGrid Items="@Elements" Filterable="true" Bordered=false>
        <Columns>
            <PropertyColumn Property="x => x.Word" Filterable="false" />
            <PropertyColumn Property="x => x.Meaning" />
            <PropertyColumn Property="x => x.PartOfSpeech" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Element" />
        </PagerContent>
    </MudDataGrid>

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    public record Element(string Word, string Meaning, string PartOfSpeech);

    IEnumerable<Element> Elements = new List<Element>();

    private MudDataGrid<Element> _mudDataGrid;
    private WordsDTO _dto;

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine(_mudDataGrid);
    }

    [Inject] public State.SiteTitle SiteTitle { get; set; }

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("VOCABULARY");

        await RefreshViewModel();
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordsQuery, GetWordsQueryResponse>(
            new GetWordsQuery());

        _dto = response.Content;

        Elements = _dto.Words.Select(w => new Element(w.Value, w.Meaning, w.PartOfSpeech)).ToList();
    }
}
