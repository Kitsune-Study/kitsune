@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.Words;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.JSInterop;

@inherits CoreComponent

@if (_dto is null) { return; }

<MudStack Class="main-section vocabulary" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <SortAndFilterBar SortProperties=@SortProperties OnSortValueChanged=@OnSortValueChanged />
    <MudDataGrid @ref=_mudDataGrid Items="@_elements" Filterable="true" Bordered=false Hover=true RowClick=@OnWordClick T="WordItem" Outlined=false RowsPerPage=@Limit Elevation=0> 
        <Columns>
            <PropertyColumn Property="x => x.Word" Filterable="false" ValueChanged=@(EventCallback.Factory.Create(this, (WordItem item) => OnValueChanged(item)))>
                
            </PropertyColumn>
            <PropertyColumn Property="x => x.Meaning" />
            <PropertyColumn Property="x => x.PartOfSpeech" Title="Part of Speech"/>
        </Columns>
        <PagerContent>
            <MudStack Row=true Style="width: 100%;">
                <MudStack Row=true Style="width: 100%; display: flex; justify-content: right;">
                    <div class="mud-table-pagination-caption">
                        <div class="mud-table-page-number-information">
                            <span>@_dto.Range.Start</span>
                            -
                            <span>@(Math.Min(_dto.Range.Limit + _dto.Range.Start, _dto.Range.TotalCount))</span>
                            of
                            <span>@(_dto.Range.TotalCount)</span>
                        </div>
                    </div>
                </MudStack>
                <div style="display: flex; justify-content: right;">
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowLeft @onclick=@OnFirstWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowLeft @onclick=@OnPrevWordPage aria-label="First page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowRight @onclick=@OnNextWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowRight @onclick=@OnLastWordPage aria-label="Previous page" />
                </div>
            </MudStack>
        </PagerContent>
    </MudDataGrid>

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Inject] public State.SiteTitle SiteTitle { get; set; }
    [Inject] public IJSRuntime JSRuntime { get; set; }

    private const int Limit = 10;

    private List<WordItem> _elements = new();

    private MudDataGrid<WordItem>? _mudDataGrid;
    private WordsDTO? _dto;

    private RangeArg _rangeArg = new(0, Limit);
    private SortArg[]? _sortArgs = null;

    private string[] SortProperties = new[] { "Word" };

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("VOCABULARY");

        await RefreshViewModel();
    }

    private async Task OnWordClick(DataGridRowClickEventArgs<WordItem> args)
    {
        Navigation.NavigateTo($"words/{args.Item.Id}");
    }

    private async Task OnPrevWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_rangeArg.Start - _rangeArg.Limit, 0), _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnNextWordPage()
    {
        _rangeArg = new RangeArg(_rangeArg.Start + _rangeArg.Limit, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnFirstWordPage()
    {
        _rangeArg = new RangeArg(0, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnLastWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_dto.Range.TotalCount - _rangeArg.Limit, 0), _dto.Range.Limit);
        await RefreshViewModel();
    }

    private async Task OnValueChanged(WordItem item)
    {
        Console.WriteLine("");
    }

    private async Task OnSortValueChanged(string value)
    {
        _sortArgs = value is null or [] ? null : new[] { new SortArg(value) };
        await RefreshViewModel();
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordsQuery, GetWordsQueryResponse>(
            new GetWordsQuery(_rangeArg, _sortArgs));

        _dto = response.Content;

        _elements = _dto.Words.Select(w => new WordItem(w.Id, w.Value, w.Meaning, w.PartOfSpeech)).ToList();
    }

    public record WordItem(string Id, string Word, string Meaning, string PartOfSpeech);
}
