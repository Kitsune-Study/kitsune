@using Manabu.UseCases.Content.Words;

@inherits CoreComponent

@if (_dto is null) { return; }

<div>
    <MudDataGrid @ref=_mudDataGrid Items="@_elements" Filterable="true" Bordered=false Hover=true RowClick=@OnWordClick T="WordItem" Outlined=false RowsPerPage=@Limit Elevation=0>
        <Columns>
            @if ((Columns & Column.Word) != 0)
            {
               <PropertyColumn Property="x => x.Word" Filterable="false" ValueChanged=@(EventCallback.Factory.Create(this, (WordItem item) => OnValueChanged(item))) /> 
            }
            @if ((Columns & Column.Meaning) != 0)
            {
                <PropertyColumn Property="x => x.Meaning" />
            }
            @if ((Columns & Column.PartOfSpeech) != 0)
            {
                <PropertyColumn Property="x => x.PartOfSpeech" Title="Part of Speech" />
            }
        </Columns>
        <PagerContent>
            <MudStack Row=true Style="width: 100%;">
                <MudStack Row=true Style="width: 100%; display: flex; justify-content: right;">
                    <div class="mud-table-pagination-caption">
                        <div class="mud-table-page-number-information">
                            <span>@_dto.Range.Start</span>
                            -
                            <span>@(Math.Min(_dto.Range.Limit + _dto.Range.Start, _dto.Range.TotalCount))</span>
                            of
                            <span>@(_dto.Range.TotalCount)</span>
                        </div>
                    </div>
                </MudStack>
                <div style="display: flex; justify-content: right;">
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowLeft @onclick=@OnFirstWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowLeft @onclick=@OnPrevWordPage aria-label="First page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowRight @onclick=@OnNextWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowRight @onclick=@OnLastWordPage aria-label="Previous page" />
                </div>
            </MudStack>
        </PagerContent>
    </MudDataGrid>
</div>

@code {
    [Parameter] public Column? Columns { get; set; }
    [Parameter] public PartOfSpeech? PartOfSpeeches { get; set; }

    private WordsDTO? _dto;

    private RangeArg _rangeArg = new(0, Limit);
    private SortArg[]? _sortArgs = null;
    private FilterArg[]? _filterArgs = null;

    private const int Limit = 10;
    private List<WordItem> _elements = new();

    private MudDataGrid<WordItem>? _mudDataGrid;

    protected override async Task BeforeInitializedAsyncImpl()
    {
        var filterArgs = new List<FilterArg>();

        if ((PartOfSpeeches & PartOfSpeech.Verb) != 0)
            filterArgs.Add(new("PartsOfSpeech", "verb"));

        if ((PartOfSpeeches & PartOfSpeech.Noun) != 0)
            filterArgs.Add(new("PartsOfSpeech", "noun"));
        
        _filterArgs = filterArgs.ToArray();
    }

    private async Task OnWordClick(DataGridRowClickEventArgs<WordItem> args)
    {
        Navigation.NavigateTo($"words/{args.Item.Id}");
    }

    private async Task OnPrevWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_rangeArg.Start - _rangeArg.Limit, 0), _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnNextWordPage()
    {
        _rangeArg = new RangeArg(_rangeArg.Start + _rangeArg.Limit, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnFirstWordPage()
    {
        _rangeArg = new RangeArg(0, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnLastWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_dto.Range.TotalCount - _rangeArg.Limit, 0), _dto.Range.Limit);
        await RefreshViewModel();
    }

    private async Task OnValueChanged(WordItem item)
    {
        Console.WriteLine("");
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordsQuery, GetWordsQueryResponse>(
            new GetWordsQuery(_rangeArg, _sortArgs, _filterArgs));

        _dto = response.Content;

        _elements = _dto.Words.Select(w => new WordItem(w.Id, w.Value, w.Meaning, w.PartOfSpeech)).ToList();
    }

    public record WordItem(
        string Id, 
        string? Word = null, 
        string? Meaning = null,
        string? PartOfSpeech = null);

    [Flags]
    public enum Column
    {
        Word,
        Meaning,
        PartOfSpeech,
        Property,
        Properties,
    }

    [Flags]
    public enum PartOfSpeech
    {
        Verb,
        Noun,
        Particle,
    }
}
