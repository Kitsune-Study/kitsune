@using Manabu.UseCases.Content.Words;

@inherits CoreComponent

@if (_dto is null) { return; }

<div>
    <SortAndFilterBar 
        SortProperties=@SortProperties OnSortValueChanged=@OnSortValueChanged 
        FilterProperties=@FilterProperties />
    <MudDataGrid @ref=_mudDataGrid Items="@_elements" Filterable=false Bordered=false Hover=true RowClick=@OnWordClick T="WordItem" Outlined=false RowsPerPage=@Limit Elevation=0
        >
        <Columns>
            @if ((Columns & Column.Word) != 0)
            {
               <PropertyColumn Property="x => x.Word" Filterable=false ValueChanged=@(EventCallback.Factory.Create(this, (WordItem item) => OnValueChanged(item))) /> 
            }
            @if ((Columns & Column.Reading) != 0)
            {
                <PropertyColumn Property="x => x.Reading" Title="Reading" Filterable=false />
            }
            @if ((Columns & Column.Meaning) != 0)
            {
                <PropertyColumn Property="x => x.Meaning" Filterable=false />
            }
            @if ((Columns & Column.PartOfSpeech) != 0)
            {
                <PropertyColumn Property="x => x.PartOfSpeech" Title="Part of Speech" Filterable=false />
            }
        </Columns>
        <PagerContent>
            <MudStack Row=true Style="width: 100%;">
                <MudStack Row=true Style="width: 100%; display: flex; justify-content: right;">
                    <div class="mud-table-pagination-caption">
                        <div class="mud-table-page-number-information">
                            <span>@_dto.Range.Start</span>
                            -
                            <span>@(Math.Min(_dto.Range.Limit + _dto.Range.Start, _dto.Range.TotalCount))</span>
                            of
                            <span>@(_dto.Range.TotalCount)</span>
                        </div>
                    </div>
                </MudStack>
                <div style="display: flex; justify-content: right;">
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowLeft @onclick=@OnFirstWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowLeft @onclick=@OnPrevWordPage aria-label="First page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowRight @onclick=@OnNextWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowRight @onclick=@OnLastWordPage aria-label="Previous page" />
                </div>
            </MudStack>
        </PagerContent>
    </MudDataGrid>
</div>

@code {
    [Parameter] public Column? Columns { get; set; } = Column.Word | Column.Reading | Column.Meaning;
    [Parameter] public PartOfSpeech? PartOfSpeeches { get; set; }

    private WordsDTO? _dto;

    private string? _searchTextArg;

    private RangeArg _rangeArg = new(0, Limit);
    private SortArg[]? _sortArgs = null;
    private FilterArg[]? _filterArgs = null;

    private const int Limit = 10;
    private List<WordItem> _elements = new();

    private MudDataGrid<WordItem>? _mudDataGrid;

    private string[] SortProperties = new[] { "Word", "Meaning", "Part Of Speech" };
    private string[] FilterProperties = new[] { "Word", "Meaning", "Part Of Speech" };

    protected override async Task BeforeInitializedAsyncImpl()
    {
        InitializeFilterArgs();
    }

    private void InitializeFilterArgs()
    {
        if (PartOfSpeeches is null)
            return;

        var filterArgs = new List<FilterArg>();

        if ((PartOfSpeeches & PartOfSpeech.Verb) != 0)
            filterArgs.Add(new("PartsOfSpeech", "verb"));

        if ((PartOfSpeeches & PartOfSpeech.Noun) != 0)
            filterArgs.Add(new("PartsOfSpeech", "noun"));

        if ((PartOfSpeeches & PartOfSpeech.Numeral) != 0)
            filterArgs.Add(new("PartsOfSpeech", "numeral"));

        if ((PartOfSpeeches & PartOfSpeech.Adjective) != 0)
            filterArgs.Add(new("PartsOfSpeech", "adjective"));

        _filterArgs = filterArgs.ToArray();
    }

    protected override Task OnAfterRenderAsyncImpl(bool firstRender)
    {
        return base.OnAfterRenderAsyncImpl(firstRender);
    }

    private async Task OnWordClick(DataGridRowClickEventArgs<WordItem> args)
    {
        Navigation.NavigateTo($"words/{args.Item.Id}");
    }

    private async Task OnPrevWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_rangeArg.Start - _rangeArg.Limit, 0), _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnNextWordPage()
    {
        _rangeArg = new RangeArg(_rangeArg.Start + _rangeArg.Limit, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnFirstWordPage()
    {
        _rangeArg = new RangeArg(0, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnLastWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_dto.Range.TotalCount - _rangeArg.Limit, 0), _dto.Range.Limit);
        await RefreshViewModel();
    }

    private async Task OnValueChanged(WordItem item)
    {
        Console.WriteLine("");
    }

    private async Task OnSortValueChanged(string value)
    {
        _sortArgs = value.IsNullOrEmpty() ? null : new[] { new SortArg(value) };
        await RefreshViewModel();
    }

    private async Task OnSearchValueChanged(string value)
    {
        _searchTextArg = value;
        await RefreshViewModel();
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordsQuery, GetWordsQueryResponse>(
            new GetWordsQuery(_rangeArg, _sortArgs, _filterArgs));

        _dto = response.Content;

        _elements = _dto.Words.Select(w => new WordItem(w.Id, w.Value, w.Meaning, w.PartOfSpeech, w.Reading)).ToList();
    }

    List<IFilterDefinition<WordItem>> FilterDefinitions = new() { new TestFilterDefinition() };

    class TestFilterDefinition : IFilterDefinition<WordItem>
    {
        int i = 0;
        public Guid Id { get; set; }

        public Column<WordItem>? Column { get; set; }

        public string? Title { get; set; }

        public string? Operator { get; set; }

        public object? Value { get; set; }

        public Func<WordItem, bool> GenerateFilterFunction(FilterOptions? filterOptions = null) =>
            item =>
            {
                Console.WriteLine($"Filter - {i++}");
                return true;
            };

        public IFilterDefinition<WordItem> Clone() { return null; }
    }

    public record WordItem(
        string Id,
        string? Word = null, 
        string? Meaning = null,
        string? PartOfSpeech = null,
        string? Reading = null);

    [Flags]
    public enum Column
    {
        Word = 1,
        Meaning = 2,
        PartOfSpeech = 4,
        Property = 8,
        Properties = 16,
        Reading = 32
    }

    [Flags]
    public enum PartOfSpeech
    {
        Verb = 1,
        Noun = 2,
        Particle = 4,
        Numeral = 8,
        Adjective = 16,
    }
}
