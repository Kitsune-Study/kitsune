@using Corelibs.Basic.Blocks;
@using Corelibs.Blazor.UIComponents.Common;
@using Microsoft.AspNetCore.Components.Forms;

<MudFileUpload T=@IBrowserFile FilesChanged=@UploadFiles>
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            @Text
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private List<string> errors = new();
    private long maxFileSize = 1024 * 1024 * 1; // represents 3MB
    private int maxAllowedFiles = 3;

    public delegate Task<Result> OnUploadDelegate(IBrowserFile file);

    [Parameter] public OnUploadDelegate OnUpload { get; set; }
    [Parameter] public string Text { get; set; } = "Upload File";

    private async Task UploadFiles(IBrowserFile file)
    {
        errors.Clear();

        var result = await UIComponent.Invoke<Result>(OnUpload, file)();
        if (!result.IsSuccess)
            errors.AddRange(result.AllErrors.Select(e => e.ToString()));
    }
}
