@inject ISnackbar Snackbar

<style>
    div {
        --size: @(IsSmallLabel ? "12px" : "20px");
        --lineHeight: @(IsSmallLabel ? "24px" : "40px");
    }

</style>

<div>
    @if (IsEditing)
    {
        <MudTextField T="string"
                      Label=@Label
                      Variant="Variant.Text"
                      OnBlur=@OnEditableItemBlur
                      Value=@_dynamicText
                      ValueChanged=@OnTextFieldValueChanged
                      AutoFocus=true />
    }
    else
    {
        <MudField @onclick=OnClickItem
                  Label=@Label
                  Variant="Variant.Text"
                  DisableUnderLine=true
                  Style="font-weight: bold;">
            <span>@Value</span>
        </MudField>
    }
</div>

@code {
    public delegate Task<bool> OnEditDelegate(string text);

    [Parameter] public bool IsReadonly { get; set; }
    [Parameter] public bool IsEditing { get; set; }

    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Value { get; set; } = "";

    [Parameter] public OnEditDelegate OnEdit { get; set; }
    [Parameter] public Action OnBlur { get; set; }

    [Parameter] public bool IsSmallLabel { get; set; }

    private string _dynamicText;

    protected override void OnInitialized()
    {
        Value ??= "";
        Value = Value.Trim();
        _dynamicText = Value;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //if (_textField is not null)
        //_textField.Value = Value.Trim();
    }

    private async Task OnTextFieldValueChanged(string value)
    {
        _dynamicText = value;

        var trimmed = _dynamicText.Trim();
        if (trimmed == Value)
            return;

        Value = _dynamicText;
        IsEditing = false;
        if (!await UIComponent.InvokeBool(OnEdit, trimmed)())
        {
            _dynamicText = Value;
            return;
        }

        Snackbar.Add("Modified successfully", Severity.Normal, opts =>
        {
            opts.VisibleStateDuration = 2000;
        });

        Value = _dynamicText;
    }

    private void OnEditableItemBlur(FocusEventArgs args)
    {
        IsEditing = false;
        OnBlur?.Invoke();
    }

    private async Task OnClickItem(MouseEventArgs args)
    {
        if (IsReadonly)
            return;

        IsEditing = true;
        await InvokeAsync(StateHasChanged);
    }
}
