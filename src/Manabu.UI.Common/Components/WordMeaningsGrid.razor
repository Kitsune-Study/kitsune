@using Manabu.UseCases.Content.WordMeanings

@inherits CoreComponent

@if (_dto is null) { return; }

<div class="">
    <div class="select d-flex mb-2 align-center">
        <div class="flex-grow-0">
            <SortAndFilterBar 
                SortProperties=@SortProperties
                FilterProperties=@FilterProperties
                OnValueChanged=@OnSortOrFilterValueChanged />
        </div>
        <div class="radios-and-inflection d-flex align-center justify-end" style="width: 100%; @_writingSettingsCssStyle; display: none;">
            <MudRadioGroup T=int SelectedOption=1>
                <MudRadio Option=1>Default</MudRadio>
                <MudRadio Option=2>Hiragana</MudRadio>
                <MudRadio Option=3>Katakana</MudRadio>
                <MudRadio Option=4>Custom</MudRadio>
            </MudRadioGroup>
            <MudSelect T=string Label="Inflection" Variant=Variant.Outlined AnchorOrigin=Origin.BottomCenter FullWidth=false>
                <MudSelectItem T=string Value=@("Inflection 1") />
                <MudSelectItem T=string Value=@("Inflection 2") />
                <MudSelectItem T=string Value=@("Inflection 3") />
            </MudSelect>
        </div>
    </div>
    <MudButton Variant="Variant.Filled" DisableElevation=true OnClick=@OnWordClick Class="action-button" Style="@_writingSettingsCssStyle">Add</MudButton>
    <MudDataGrid Class="word-meanings-grid" @ref=_mudDataGrid MultiSelection=false SelectedItemChanged=@OnSelectedItemChanged
        Items="@_elements" Filterable=false Bordered=false SelectOnRowClick=true Hover=true T="WordItem" Outlined=false RowsPerPage=@Limit Elevation=0>
        <Columns>
            <SelectColumn T=WordItem />
            <PropertyColumn Property="x => x.Meaning" Filterable=false />
            <PropertyColumn Property="x => x.Word" Filterable=false />
            <PropertyColumn Property="x => x.Reading" Title="Reading" Filterable=false />
        </Columns>
        <PagerContent>
            <MudStack Row=true Style="width: 100%;">
                <MudStack Row=true Style="width: 100%; display: flex; justify-content: right;">
                    <div class="mud-table-pagination-caption">
                        <div class="mud-table-page-number-information">
                            <span>@_dto.Range.Start</span>
                            -
                            <span>@(Math.Min(_dto.Range.Limit + _dto.Range.Start, _dto.Range.TotalCount))</span>
                            of
                            <span>@(_dto.Range.TotalCount)</span>
                        </div>
                    </div>
                </MudStack>
                <div style="display: flex; justify-content: right;">
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowLeft @onclick=@OnFirstWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowLeft @onclick=@OnPrevWordPage aria-label="First page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardArrowRight @onclick=@OnNextWordPage aria-label="Previous page" />
                    <MudIconButton Class="mud-flip-x-rtl" Icon=@Icons.Material.Outlined.KeyboardDoubleArrowRight @onclick=@OnLastWordPage aria-label="Previous page" />
                </div>
            </MudStack>
        </PagerContent>
    </MudDataGrid>

    <MudButton Variant="Variant.Filled" DisableElevation=true OnClick=@OnWordClick Class="action-button" Style="@_writingSettingsCssStyle">Add</MudButton>
</div>

@code {
    [Parameter] public EventCallback<WordItem> OnWordMeaningSelected { get; set; }

    private WordMeaningsDTO? _dto;

    private string? _searchTextArg;

    private RangeArg _rangeArg = new(0, Limit);

    private const int Limit = 10;
    private List<WordItem> _elements = new();

    private MudDataGrid<WordItem>? _mudDataGrid;

    private string _writingSettingsCssStyle => 
        _mudDataGrid is not null &&
        _mudDataGrid.Selection.Any() &&
        _mudDataGrid.Selection.All(i => i is not null) ? "" : "display: none !important;";

    private string[] SortProperties = new[] { "Word", "Meaning" };
    private SortAndFilterBar.FilterDef[] FilterProperties = new SortAndFilterBar.FilterDef[]
    {
        "Word",
        "Meaning"
    };

    private List<ModifierArg> _modifierArgs = new();

    private Task OnWordClick() => 
        OnWordMeaningSelected.InvokeAsync(_mudDataGrid.Selection.FirstOrDefault());

    private void OnSelectedItemChanged(WordItem item)
    {
        _mudDataGrid?.Selection.Clear();
        _mudDataGrid?.Selection.Add(item);

        Console.WriteLine("");
    }

    private async Task OnPrevWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_rangeArg.Start - _rangeArg.Limit, 0), _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnNextWordPage()
    {
        _rangeArg = new RangeArg(_rangeArg.Start + _rangeArg.Limit, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnFirstWordPage()
    {
        _rangeArg = new RangeArg(0, _rangeArg.Limit);
        await RefreshViewModel();
    }

    private async Task OnLastWordPage()
    {
        _rangeArg = new RangeArg(Math.Max(_dto.Range.TotalCount - _rangeArg.Limit, 0), _dto.Range.Limit);
        await RefreshViewModel();
    }

    private async Task OnSortOrFilterValueChanged(List<SortAndFilterBar.Value> selectedValues)
    {
        _modifierArgs = selectedValues
            .Select(v => new ModifierArg(
                Field: v.Text,
                IsSort: v.Type is SortAndFilterBar.PropertyType.Sort ? true : false,
                Order: v.Descending ? -1 : 1,
                Value: v?.Selected?.Id)).ToList();

        await RefreshViewModel();
    }

    private async Task OnSearchValueChanged(string value)
    {
        _searchTextArg = value;
        await RefreshViewModel();
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordMeaningsQuery, GetWordMeaningsQueryResponse>(
            new GetWordMeaningsQuery(_rangeArg, _modifierArgs.ToArray()));

        _dto = response.Content;

        _elements = _dto.Words.Select(w => new WordItem(w.Id, w.Meaning, w.Value, w.Reading)).ToList();
    }

    public record WordItem(
        string Id,
        string? Meaning = null,
        string? Word = null,
        string? Reading = null);

    [Flags]
    public enum Column
    {
        Word = 1,
        Meaning = 2,
        PartOfSpeech = 4,
        Property = 8,
        Properties = 16,
        Reading = 32
    }

    [Flags]
    public enum PartOfSpeech
    {
        Verb = 1,
        Noun = 2,
        Particle = 4,
        Numeral = 8,
        Adjective = 16,
    }
}
