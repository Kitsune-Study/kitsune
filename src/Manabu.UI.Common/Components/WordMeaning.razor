@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.WordMeanings;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_dto is null) { return; }

<MudStack Class="main-section word-meaning" Style="width: 100%;">
    
    <SiteTitle>@SiteTitle.Name</SiteTitle>
    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <MudStack Row=true>
        <div style="min-width: 40px; width: fit-content;">
            <TextField 
                Label="Word"
                IsReadonly=true
                Value=@_dto.Value />
        </div>
        
        <MudStack Row=true Style="gap: 0;">
            @foreach (var pos in _dto.PartOfSpeeches)
            {
                <MudChip DisableRipple=true Color=Color.Error Style="color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold;">@pos</MudChip>
            }
            @foreach (var prop in _dto.Properties)
            {
                <MudChip DisableRipple=true Style="background-color: gray; color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold;">@prop</MudChip>
            }
        </MudStack>
    </MudStack>

    <EditableList
        @ref=@_translationsTreeList
        Name="Translations"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        OnAddItem=@OnAddTranslation
        OnRemoveItem=@OnRemoveTranslation
        MenuItemsRoot=@GetMenuItemsRoot("Translation")
        MenuItemsForAll=@GetMenuItemsForAll("Translation")
        TreeItems=@_translationsItems />

    @if (IsEdit)
    {
        <EditableList
            @ref=@_partOfSpeechTreeList
            Name="Parts Of Speech"
            IsReadonly=@(!IsEdit)
            NoIndents=true
            OnAddItem=@OnAddPartOfSpeech
            OnRemoveItem=@OnRemovePartOfSpeech
            MenuItemsRoot=@GetMenuItemsRoot("Part Of Speech")
            MenuItemsForAll=@GetMenuItemsForAll("Part Of Speech")
            TreeItems=@_partOfSpeechItems />

        <EditableList
            @ref=@_propertiesTreeList
            Name="Other Properties"
            IsReadonly=@(!IsEdit)
            NoIndents=true
            OnAddItem=@OnAddWordProperty
            OnRemoveItem=@OnRemoveWordProperty
            MenuItemsRoot=@GetMenuItemsRoot("Word Property")
            MenuItemsForAll=@GetMenuItemsForAll("Word Property")
            TreeItems=@_propertiesItems />
    }

    @if (!_readingsItems.IsNullOrEmpty() || IsEdit)
    {
        <EditableList 
            @ref=@_readingTreeList
            Name="Readings"
            IsReadonly=@(!IsEdit)
            TreeItems=@_readingsItems
            NoIndents=true
            OnAddItem=@OnAddItem
            OnRemoveItem=@OnRemoveItem
            MenuItemsRoot=@Readings_MenuItemsRoot
            MenuItemsPerType=@Readings_MenuItemsPerType>

            <CustomItemTemplate>
                @{
                    var readingItem = context as EditableList.TreeItemData;
                    @if (readingItem.Type == "persona")
                    {
                        var readingIndex = _readingTreeList.TreeItems.IndexOf(readingItem.Parent);
                        var personaIndex = readingItem.Parent.TreeItems.IndexOf(readingItem);
                        <PersonaItem IsReadonly=@(!IsEdit)
                            ReadingIndex=@readingIndex
                            ParentIndex=@personaIndex
                            OnRemove=@OnRemovePersonaItem
                            Items=@(readingItem.TreeItems.Select(i => new PersonaItem.Item(i.Id, i.Name)).ToList()) />
                    }
                    else if (readingItem.Type == "reading")
                    {
                        <span>@readingItem.Name</span>
                    }
                }
            </CustomItemTemplate>
        </EditableList>
    }

    @if (!_dto.PitchAccent.IsNullOrEmpty() || IsEdit)
    {
        <TextField 
            Label="Pitch Accent"
            IsReadonly=@(!IsEdit)
            Value=@(_dto.PitchAccent ?? "None") 
            OnEdit=@OnPitchAccentEdit />
    }

    <TextField 
        Label="Writing Preference"
        IsReadonly=@(!IsEdit)
        Value=@(_dto.KanjiWritingPreferred ? "Kanji and Kana" : "Kana Alone") 
        OnEdit=@(text =>
        {
            bool value = false;
               if (text == "Kanji and Kana" || text == "1")
                value = true;
            else
               if (text == "Kana Alone" || text == "0")
               value = false;
            else
                return Task.FromResult(false);

            return OnKanjiPreferenceChange(value);
        })/>

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string WordMeaningId { get; set; }
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private WordMeaningDetailsDTO? _dto;
    private List<BreadcrumbItem> _breadcrumbs = new();

    private EditableList? _partOfSpeechTreeList;
    private List<EditableList.TreeItemData>? _partOfSpeechItems;

    private EditableList? _translationsTreeList;
    private List<EditableList.TreeItemData>? _translationsItems;

    private EditableList? _readingTreeList;
    private List<EditableList.TreeItemData>? _readingsItems;

    private EditableList? _propertiesTreeList;
    private List<EditableList.TreeItemData>? _propertiesItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("Word Meaning".ToUpper());

        _breadcrumbs.Add(new("Words", href: "/words"));
        _breadcrumbs.Add(new($"{_dto.Value}", href: $"/words/{_dto.WordId}"));
        _breadcrumbs.Add(new($"Meanings", href: "", disabled: true));

        await RefreshViewModel();
    }

    private MenuItem[] GetMenuItemsForAll(string addItemName) => new[]
    {
        MenuItems.AddSibling with { Name = $"Add {addItemName}" },
        MenuItems.Remove,
    };

    private MenuItem[] GetMenuItemsRoot(string addItemName) => new[]
    {
        MenuItems.AddChildAsLast with { Name = $"Add {addItemName}" },
        MenuItems.AddChildAsFirst with { Name = $"Add {addItemName} at Start" },
    };

    #region Readings

    private Dictionary<string, MenuItem[]> Readings_MenuItemsPerType = new()
    {
        {
            "reading",
            new MenuItem[]
            {
                MenuItems.AddChildAsLast with { Name = "Add Persona", IdSecondary = "addPersona"},
                MenuItems.AddChildAsFirst with { Name = "Add Persona at Start", IdSecondary = "addPersona" },
                MenuItems.AddSibling with { Name = "Add Reading", IdSecondary = "addReading"},
            }
        },
        {
            "persona",
            new MenuItem[]
            {
                MenuItems.AddChildAsLast with { Name = "Add Persona Item", IdSecondary = "addPersonaItem"},
                MenuItems.AddChildAsFirst with { Name = "Add Persona Item at Start", IdSecondary = "addPersonaItem" },
                MenuItems.AddSibling with { Name = "Add Persona", IdSecondary = "addPersona"},
                MenuItems.Remove with { Name = "Remove", IdSecondary = "removeLesson"},
            }
        }
    };

    private MenuItem[] Readings_MenuItemsRoot = new MenuItem[]
    {
        MenuItems.AddChildAsLast with { Name = "Add Reading", IdSecondary = "addReading"},
        MenuItems.AddChildAsFirst with { Name = "Add Reading at Start", IdSecondary = "addReading" },
    };

    private Task OnRemovePersonaItem(PersonaItem.RemoveEventArg arg)
    {
        _readingTreeList
            .TreeItems[arg.ReadingIndex]
            .TreeItems[arg.PersonaIndex]
            .TreeItems.RemoveAt(arg.PersonaItemIndex);

        return UpdateReadings();
    }

    private Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, MenuItem menuItem)
    {
        return UpdateReadings();
    }

    private Task<bool> OnRemoveItem(EditableList.TreeItemData item, MenuItem menuItem)
    {
        return UpdateReadings();
    }

    private Task<bool> UpdateReadings()
    {
        var readings = _readingTreeList.TreeItems.Select(i =>
            new ReadingArg(i.Name, i.TreeItems.SelectOrEmpty(p =>
                new PersonaArg(p.TreeItems.SelectOrEmpty(pi =>
                    new PersonaItemArg(pi.Id, pi.Name)).ToArray()))
                .ToArray()))
            .ToArray();

        return ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, Readings: readings)));
    }

    #endregion

    #region Translations

    private Task<bool> OnAddTranslation(EditableList.TreeItemData item, int index, MenuItem menuItem) =>
        UpdateTranslations();

    private Task<bool> OnRemoveTranslation(EditableList.TreeItemData item, MenuItem menuItem) =>
        UpdateTranslations();

    private Task<bool> UpdateTranslations() =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, Translations: _translationsTreeList.TreeItems.Select(i => i.Name).ToArray())));

    #endregion

    #region Part Of Speeches

    private Task<bool> OnAddPartOfSpeech(EditableList.TreeItemData item, int index, MenuItem menuItem) =>
        UpdatePartOfSpeeches();

    private Task<bool> OnRemovePartOfSpeech(EditableList.TreeItemData item, MenuItem menuItem) =>
        UpdatePartOfSpeeches();

    private Task<bool> UpdatePartOfSpeeches() =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, PartOfSpeeches: _partOfSpeechTreeList.TreeItems.Select(i => i.Name).ToArray())));

    #endregion

    #region Word Properties

    private Task<bool> OnAddWordProperty(EditableList.TreeItemData item, int index, MenuItem menuItem) =>
        UpdateWordProperties();

    private Task<bool> OnRemoveWordProperty(EditableList.TreeItemData item, MenuItem menuItem) =>
        UpdateWordProperties();

    private Task<bool> UpdateWordProperties() =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, WordProperties: _propertiesTreeList.TreeItems.Select(i => i.Name).ToArray())));

    #endregion

    private Task<bool> OnPitchAccentEdit(string text) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, PitchAccent: text)));

    private Task<bool> OnKanjiPreferenceChange(bool value) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, KanjiWritingPreference: value)));

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordMeaningQuery, GetWordMeaningQueryResponse>(
            new GetWordMeaningQuery(WordMeaningId));

        _dto = response.Content;

        _translationsItems = _dto.Translations.SelectOrEmpty(p => new EditableList.TreeItemData(p) { Type = "Translation" }).ToList();
        _partOfSpeechItems = _dto.PartOfSpeeches.SelectOrEmpty(p => new EditableList.TreeItemData(p) { Type = "Part Of Speech" }).ToList();
        _propertiesItems = _dto.Properties.SelectOrEmpty(p => new EditableList.TreeItemData(p) { Type = "Word Property" }).ToList();
        _readingsItems = _dto.Readings.SelectOrEmpty(r => new EditableList.TreeItemData(
            r.Value,
            r.Personas.SelectOrEmpty((p, i) => new EditableList.TreeItemData(
                $"Persona {i + 1}",
                p.Properties.SelectOrEmpty(kv => new EditableList.TreeItemData($"{kv.Key}", kv.Value) { IsExpanded = true, Display = false }).ToList())
                { IsExpanded = true, Type = "persona" }).ToList())
            { IsExpanded = true, Type = "reading" }).ToList();
    }
}
