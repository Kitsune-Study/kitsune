@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.WordMeanings;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_dto is null) { return; }

<MudStack Class="main-section word-meaning" Style="width: 100%;">
    
    <SiteTitle>@SiteTitle.Name</SiteTitle>
    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <TextField 
        Label="Word"
        IsReadonly=true
        Value=@_dto.Value />

    <EditableList
        Name="Translations"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@_translationsItems />

    <EditableList
        Name="Parts Of Speech"
        IsReadonly=true
        NoIndents=true
        TreeItems=@_partOfSpeechItems />

    @if (!_readingsItems.IsNullOrEmpty() || IsEdit)
    {
        <EditableList 
            @ref=@_readingTreeList
            Name="Readings"
            IsReadonly=@(!IsEdit)
            TreeItems=@_readingsItems
            NoIndents=true
            OnAddItem=@OnAddReading
            OnRemoveItem=@OnRemoveReading
            MenuItemsRoot=@MenuItemsRoot
            MenuItemsPerType=@MenuItemsPerType>

            <CustomItemTemplate>
                @{
                    var readingItem = context as EditableList.TreeItemData;
                    @if (readingItem.Type == "persona")
                    {
                        var readingIndex = _readingTreeList.TreeItems.IndexOf(readingItem.Parent);
                        var personaIndex = readingItem.Parent.TreeItems.IndexOf(readingItem);
                        <PersonaItem IsReadonly=@(!IsEdit)
                            ReadingIndex=@readingIndex
                            ParentIndex=@personaIndex
                            OnRemove=@OnRemovePersonaItem
                            Items=@(readingItem.TreeItems.Select(i => new PersonaItem.Item(i.Id, i.Name)).ToList()) />
                    }
                    else if (readingItem.Type == "reading")
                    {
                        <span>@readingItem.Name</span>
                    }
                }
            </CustomItemTemplate>
        </EditableList>
    }

    @if (!_dto.PitchAccent.IsNullOrEmpty() || IsEdit)
    {
        <TextField 
            Label="Pitch Accent"
            IsReadonly=@(!IsEdit)
            Value=@(_dto.PitchAccent ?? "None") 
            OnEdit=@OnPitchAccentEdit />
    }

    <TextField 
        Label="Writing Preference"
        IsReadonly=@(!IsEdit)
        Value=@(_dto.KanjiWritingPreferred ? "Kanji and Kana" : "Kana Alone") 
        OnEdit=@(text =>
        {
            bool value = false;
               if (text == "Kanji and Kana" || text == "1")
                value = true;
            else
               if (text == "Kana Alone" || text == "0")
               value = false;
            else
                return Task.FromResult(false);

            return OnKanjiPreferenceChange(value);
        })/>

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string WordMeaningId { get; set; }
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private WordMeaningDetailsDTO? _dto;
    private List<BreadcrumbItem> _breadcrumbs = new();

    private List<EditableList.TreeItemData> _partOfSpeechItems;
    private List<EditableList.TreeItemData> _translationsItems;

    private EditableList? _readingTreeList;
    private List<EditableList.TreeItemData> _readingsItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("Word Meaning".ToUpper());

        _breadcrumbs.Add(new("Words", href: "/words"));
        _breadcrumbs.Add(new($"{_dto.Value}", href: $"/words/{_dto.WordId}"));
        _breadcrumbs.Add(new($"Meanings", href: "", disabled: true));

        await RefreshViewModel();
    }

    private Dictionary<string, MenuItem[]> MenuItemsPerType = new()
    {
        {
            "reading",
            new MenuItem[]
            {
                MenuItems.AddChildAsLast with { Name = "Add Persona", IdSecondary = "addPersona"},
                MenuItems.AddChildAsFirst with { Name = "Add Persona at Start", IdSecondary = "addPersona" },
                MenuItems.AddSibling with { Name = "Add Reading", IdSecondary = "addReading"},
            }
        },
        {
            "persona",
            new MenuItem[]
            {
                MenuItems.AddChildAsLast with { Name = "Add Persona Item", IdSecondary = "addPersonaItem"},
                MenuItems.AddChildAsFirst with { Name = "Add Persona Item at Start", IdSecondary = "addPersonaItem" },
                MenuItems.AddSibling with { Name = "Add Persona", IdSecondary = "addPersona"},
                MenuItems.Remove with { Name = "Remove", IdSecondary = "removeLesson"},
            }
        }
    };

    private MenuItem[] MenuItemsRoot = new MenuItem[]
    {
        MenuItems.AddChildAsLast with { Name = "Add Reading", IdSecondary = "addReading"},
        MenuItems.AddChildAsFirst with { Name = "Add Reading at Start", IdSecondary = "addReading" },
    };

    private Task<bool> OnAddReading(
        EditableList.TreeItemData item, int index, MenuItem menuItem)
    {
        return UpdateReadings();
    }

    private Task<bool> OnRemoveReading(EditableList.TreeItemData item, MenuItem menuItem)
    {
        return UpdateReadings();
    }

    private Task OnRemovePersonaItem(PersonaItem.RemoveEventArg arg)
    {
        _readingTreeList
            .TreeItems[arg.ReadingIndex]
            .TreeItems[arg.PersonaIndex]
            .TreeItems.RemoveAt(arg.PersonaItemIndex);

        return UpdateReadings();
    }

    private Task<bool> OnPitchAccentEdit(string text) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, PitchAccent: text)));

    private Task<bool> OnKanjiPreferenceChange(bool value) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, KanjiWritingPreference: value)));

    private Task<bool> UpdateReadings()
    {
        var readings = _readingTreeList.TreeItems.Select(i =>
            new ReadingArg(i.Name, i.TreeItems.SelectOrEmpty(p =>
                new PersonaArg(p.TreeItems.SelectOrEmpty(pi =>
                    new PersonaItemArg(pi.Id, pi.Name)).ToArray()))
                .ToArray()))
            .ToArray();

        return ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateWordMeaningCommand(
            WordMeaningId, Readings: readings)));
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordMeaningQuery, GetWordMeaningQueryResponse>(
            new GetWordMeaningQuery(WordMeaningId));

        _dto = response.Content;

        _translationsItems = _dto.Translations.SelectOrEmpty(p => new EditableList.TreeItemData(p)).ToList();
        _partOfSpeechItems = _dto.PartOfSpeeches.SelectOrEmpty(p => new EditableList.TreeItemData(p)).ToList();
        _readingsItems = _dto.Readings.SelectOrEmpty(r => new EditableList.TreeItemData(
            r.Value,
            r.Personas.SelectOrEmpty((p, i) => new EditableList.TreeItemData(
                $"Persona {i + 1}",
                p.Properties.SelectOrEmpty(kv => new EditableList.TreeItemData($"{kv.Key}", kv.Value) { IsExpanded = true, Display = false }).ToList())
                { IsExpanded = true, Type = "persona" }).ToList())
            { IsExpanded = true, Type = "reading" }).ToList();
    }
}
