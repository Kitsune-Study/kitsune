@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.WordMeanings;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_dto is null) { return; }

<MudStack Class="main-section word-meaning" Style="width: 100%;">
    
    <SiteTitle>@SiteTitle.Name</SiteTitle>
    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <TextField 
        Label="Word"
        IsReadonly=@(!IsEdit)
        Value=@_dto.Value />

    <EditableList
        Name="Parts Of Speech"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@_partOfSpeechItems />

    <EditableList
        Name="Translations"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@_translationsItems />

    <TextField 
        Label="Pitch Accent"
        IsReadonly=@(!IsEdit)
        Value=@(_dto.PitchAccent ?? "None") />

    <TextField 
        Label="Writing Preference"
        IsReadonly=@(!IsEdit)
        Value=@(_dto.KanjiWritingPreferred ? "Kanji and Kana" : "Kana Alone") />

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string WordMeaningId { get; set; }
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private WordMeaningDetailsDTO? _dto;
    private List<BreadcrumbItem> _breadcrumbs = new();

    private List<EditableList.TreeItemData> _partOfSpeechItems;
    private List<EditableList.TreeItemData> _translationsItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("Word Meaning".ToUpper());

        _breadcrumbs.Add(new("Words", href: "/words"));
        _breadcrumbs.Add(new($"{_dto.Value}", href: $"/words/{_dto.WordId}"));
        _breadcrumbs.Add(new($"Meanings", href: "", disabled: true));

        await RefreshViewModel();
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordMeaningQuery, GetWordMeaningQueryResponse>(
            new GetWordMeaningQuery(WordMeaningId));

        _dto = response.Content;
        _translationsItems = _dto.Translations.Select(p => new EditableList.TreeItemData(p)).ToList();
        _partOfSpeechItems = _dto.PartOfSpeeches.Select(p => new EditableList.TreeItemData(p)).ToList();
    }
}
