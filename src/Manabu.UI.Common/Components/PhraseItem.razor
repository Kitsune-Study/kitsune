<MudStack Row=true Style="padding: 0px;">
    @if (!IsReadonly)
    {
        string width = SpeakerName.IsNullOrEmpty() || SpeakerName.Length < 5 ? "50px" : "fit-content";
        <div style=@($"flex-grow: 0; width: {width}") @onclick:stopPropagation="true" @onclick:preventDefault="true">

            <TextField Label="Speaker"
                       Value=@SpeakerName
                       OnEdit=@OnSpeakerSet />
        </div>
    }
    else if (ShowSpeaker)
    {
        @if (!SpeakerName.IsNullOrEmpty())
        {
            if (NoLabels)
            {
                <MudText>@SpeakerName:</MudText>
            }
            else
            {
                <MudField Label=@(NoLabels ? "" : "Speaker")
                          Variant="Variant.Text"
                          DisableUnderLine=true
                          Style="font-weight: bold; flex-grow: 0;">
                    @SpeakerName:
                </MudField>
            }
        }
    }

    @if (IsReadonly)
    {
        if (NoLabels)
        {
            <MudText>@Content</MudText>
        }
        else
        {
            <MudField Label=@("Phrase")
                      Variant="Variant.Text"
                      DisableUnderLine=true
                      Style="font-weight: bold; flex-grow: 0;">
                @Content
            </MudField>
        }
    }
    else
    {
        <TextField IsReadonly=@IsReadonly
                   Label=@("Phrase")
                   Value=@Content
                   OnEdit=@OnSubmitPhraseInternal />
    }

</MudStack>

@code {
    public delegate Task<bool> OnPhraseSubmitDelegate(string id, string text);
    public delegate Task<bool> OnSpeakerSubmitDelegate(string id, string name);

    [Parameter] public bool IsReadonly { get; set; }

    [Parameter] public string Id { get; set; }
    [Parameter] public string SpeakerName { get; set; }
    [Parameter] public string Content { get; set; }

    [Parameter] public bool ShowSpeaker { get; set; } = true;

    [Parameter] public bool NoLabels { get; set; } = true;

    [Parameter] public OnPhraseSubmitDelegate OnPhraseSubmit { get; set; }
    [Parameter] public OnSpeakerSubmitDelegate OnSpeakerSubmit { get; set; }

    private Task<bool> OnSpeakerSet(string name)
    {
        SpeakerName = name;
        return UIComponent.InvokeBool(OnSpeakerSubmit, Id, name)();
    }

    private async Task<bool> OnSubmitPhraseInternal(string value)
    {
        return await UIComponent.InvokeBool(OnPhraseSubmit, Id, value)();
    }
}
