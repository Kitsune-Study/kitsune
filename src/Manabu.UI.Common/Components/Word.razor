@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.Words;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_dto is null) { return; }

<MudStack Class="main-section word" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <TextField 
        IsReadonly=@(!IsEdit)
        Value=@_dto.Value />

    <EditableList
        Name="Parts Of Speech"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@_partOfSpeechItems />

    <EditableList
        Name="Meanings"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@_meaningsItems />

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string WordId { get; set; }
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private WordDetailsDTO? _dto;

    private List<EditableList.TreeItemData>? _partOfSpeechItems;
    private List<EditableList.TreeItemData>? _meaningsItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("WORD");
        await RefreshViewModel();
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordQuery, GetWordQueryResponse>(
            new GetWordQuery(WordId));

        _dto = response.Content;

        _partOfSpeechItems = _dto.PartOfSpeches.Select(p => new EditableList.TreeItemData(p)).ToList();
        _meaningsItems = _dto.Meanings.Select(m => new EditableList.TreeItemData(m)).ToList();
    }
}
