@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UseCases.Content.Courses;
@using Manabu.UseCases.Content.Lessons;
@using Manabu.UseCases.Content.Words;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_dto is null) { return; }

<MudStack Class="main-section word" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <MudStack Row=true>
        <div style="width: 40px;">
            <TextField 
                Label="Word"
                IsReadonly=true
                Value=@_dto.Value />
        </div>

        <MudStack Row=true Style="gap: 0;">
            @foreach (var pos in _dto.PartOfSpeches)
            {
                <MudChip DisableRipple=true Color=Color.Error Style="color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold;">@pos</MudChip>
            }
            @foreach (var prop in _dto.Properties)
            {
                <MudChip DisableRipple=true Style="color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold;">@prop</MudChip>
            }
        </MudStack>
    </MudStack>

    @if (IsEdit)
    {
        <EditableList
            Name="Parts Of Speech"
            IsReadonly=true
            NoIndents=true
            TreeItems=@_partOfSpeechItems />

        <EditableList
            Name="Other Properties"
            IsReadonly=true
            NoIndents=true
            TreeItems=@_propertiesItems />
    }

    <EditableList
        Name="Meanings"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@_meaningsItems 
        MenuItemsRoot=@WordMeanings_MenuItemsRoot
        MenuItemsPerType=@WordMeanings_MenuItemsPerType
        OnAddItem=@OnAddWordMeaningItem
        OnItemClick=@OnItemClick />

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string WordId { get; set; }
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private WordDetailsDTO? _dto;

    private List<EditableList.TreeItemData>? _partOfSpeechItems;
    private List<EditableList.TreeItemData>? _meaningsItems;
    private List<EditableList.TreeItemData>? _propertiesItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("WORD");
        await RefreshViewModel();
    }

    private async Task OnItemClick(EditableList.TreeItemData item)
    {
        Navigation.NavigateTo($"word-meanings/{item.Id}");
    }

    private Task<bool> OnAddWordMeaningItem(EditableList.TreeItemData item, int index, MenuItem menuItem) =>
        ExecuteAdminViewAction(
            () => CommandExecutor.Execute(
                new CreateWordMeaningCommand(item.Name, WordId, index)));

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetWordQuery, GetWordQueryResponse>(
            new GetWordQuery(WordId));

        _dto = response.Content;

        _partOfSpeechItems = _dto.PartOfSpeches.Select(p => new EditableList.TreeItemData(p)).ToList();
        _propertiesItems = _dto.Properties.SelectOrEmpty(p => new EditableList.TreeItemData(p)).ToList();
        _meaningsItems = _dto.Meanings.Select(m => new EditableList.TreeItemData(m.Id, m.Value)).ToList();
    }

    private Dictionary<string, MenuItem[]> WordMeanings_MenuItemsPerType = new()
    {
        {
            "word meaning",
            new MenuItem[]
            {
                //MenuItems.MoveDown,
                //MenuItems.MoveUp,
                MenuItems.AddSibling with { Name = "Add Meaning", IdSecondary = "addMeaning"},
            }
        }
    };

    private MenuItem[] WordMeanings_MenuItemsRoot = new MenuItem[]
    {
        MenuItems.AddChildAsLast with { Name = "Add Meaning", IdSecondary = "addMeaning"},
        MenuItems.AddChildAsFirst with { Name = "Add Meaning as First", IdSecondary = "addMeaning" },
    };
}
