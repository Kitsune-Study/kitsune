@using Corelibs.Basic.Reflection;
@using Manabu.UseCases.Courses;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

<MudStack Class="courses" Style="width: 100%;">
    <SiteTitle>COURSES</SiteTitle>

    <SimpleList Items=@(TestItems.CastToList<SimpleList.ItemData>())>
        <CustomItemTemplate>
            @{
                var item = context as CourseItemData;
                <CourseItem
                    Title=@item.Name 
                    Author=@item.Author />
            }
        </CustomItemTemplate>
    </SimpleList>

    <EditableList 
        TreeItems=@_treeItems
        OnAddItem=@OnAddItem
        IsReadonly=@(!_isEdit)
        MenuItemsRoot=@MenuItemsRoot
        OnItemClick=@OnItemClick
        NoIndents=true />


    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }
</MudStack>

@code {
    private List<EditableList.TreeItemData> _treeItems;

    private CourseDTO[]? _courses;
    private List<List.ListItem>? _listItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        await RefreshViewModel();
    }

    private async Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, EditableList.MenuItem menuItem)
    {
        if (!await Auth.IsAdmin())
            return false;

        await CommandExecutor.Execute(new CreateCourseCommand(item.Name));
        await RefreshView();

        return true;
    }

    private async Task OnItemClick(EditableList.TreeItemData item)
    {
        Navigation.NavigateTo($"courses/{item.Id}");
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetCoursesQuery, GetCoursesQueryResponse>();

        _courses = response?.Courses;
        _treeItems = _courses?.Select(c => new EditableList.TreeItemData(c.Id, c.Name))?.ToList();
    }

    private EditableList.MenuItem[] MenuItemsRoot = new EditableList.MenuItem[]
    {
        EditableList.MenuItems.AddChildAsLast with { Name = "Add Course", IdSecondary = "addCourse"},
        EditableList.MenuItems.AddChildAsFirst with { Name = "Add Course at Start", IdSecondary = "addCourse" },
    };

    private List<CourseItemData> TestItems = new()
    {
        new("Yuta Vocabulary", "Yuta Aoki"),
        new("Yuta General", "Yuta Aoki"),
        new("Misa Ammo Playlist", "Misa Ammo"),
    };

    public record CourseItemData(string Name, string Author, string Id = "") : SimpleList.ItemData(Name, Id);
}
