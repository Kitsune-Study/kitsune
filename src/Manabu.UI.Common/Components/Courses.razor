@using Corelibs.Basic.Reflection;
@using Manabu.UseCases.Courses;
@using Microsoft.AspNetCore.Components.Authorization;

<div class="grid-1x2f">
    <div class="v-list">
        <div class="grid-1x2">
            <List
                Title="Courses"
                ListItems=@_listItems
                OnAddItemOnTop=@OnAddItem
                OnMenuOptionSelected=@OnWorkoutPlansListDropdownOptionSelected 
                OnItemClick=@OnItemClick />
        </div>
    </div>
    @*<div class="v-list">
        <DropdownWithLabel 
            Title="Ownership"
            Model=@OwnershipFilterDropdownModel 
            OnOptionSelected=OnOwnershipFilterDropdownModelOptionSelected />
    </div>*@
</div>

@code {
    [Inject] public IQueryExecutor QueryExecutor { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider Auth { get; set; }

    private CourseDTO[]? _courses;
    private List<List.ListItem>? _listItems;

    protected override async Task OnInitializedAsync()
    {
        await RefreshViewModel();
    }

    private async Task<bool> OnWorkoutPlansListDropdownOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnOwnershipFilterDropdownModelOptionSelected(Dropdown.Option option)
    {
        Console.WriteLine(option.ToString());
        return true;
    }

    private async Task<bool> OnAddItem(string id, string name, string type)
    {
        if (!await Auth.IsAdmin())
            return false;

        await CommandExecutor.Execute(new CreateCourseCommand(name));
        await RefreshView();

        return true;
    }

    private async Task OnItemClick(string id, string type)
    {
        Navigation.NavigateTo($"courses/{id}");
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetCoursesQuery, GetCoursesQueryResponse>();
        _courses = response?.Courses;
        _listItems = _courses?.Select(c => new List.ListItem(c.Id, c.Name))?.ToList();
    }

    private static Dropdown.ViewModel DropdownModel = new(
        Options: new()
        {
            "Add",
            "Remove",
            "Edit"
        },
        Trigger: new(IsFixed: true, Value: "Menu", Mode: Dropdown.Mode.Component)
    );

    private Dropdown.ViewModel OwnershipFilterDropdownModel = new(
        Options: new()
        {
            "Own",
            "Public",
            "All"
        },
        Trigger: new(BgOn: true)
    );
}
