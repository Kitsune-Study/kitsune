@using Corelibs.Basic.Reflection;
@using Manabu.UseCases.Courses;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if  (_dto is null) { return; }

<MudStack Class="main-section courses" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <EditableList
        Name="Official Courses"
        IsReadonly=@(!_isEdit)
        NoIndents=true
        TreeItems=@(_coursesListItems.CastToList<EditableList.TreeItemData>())
        OnItemClick=@OnCourseItemClick
        OnAddItem=@OnAddCourseItem
        OnRemoveItem=@OnRemoveCourseItem
        MenuItemsRoot=@CoursesMenuItemsRoot 
        MenuItemsForAll=@CourseMenuItems 
        Gap=10>
    
        <CustomItemTemplate>
            @{
                var item = context as CourseItemData;
                <CourseItem
                    Title=@item.Name
                    Author=@item.Author />
            }
        </CustomItemTemplate>

    </EditableList>

    @if (_isEdit)
    {
        <EditableList
            Name="Archived Courses"
            IsReadonly=@(!_isEdit)
            NoIndents=true
            TreeItems=@(_coursesArchivedListItems.CastToList<EditableList.TreeItemData>())
            OnItemClick=@OnCourseItemClick
            MenuItemsForAll=@ArchivedCourseMenuItems />
    }

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Inject] public State.SiteTitle SiteTitle { get; set; }

    private CoursesDTO? _dto;

    private List<CourseItemData> _coursesListItems;
    private List<CourseItemData> _coursesArchivedListItems;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("COURSES");
        await RefreshViewModel();
    }

    #region Courses

    private async Task<bool> OnAddCourseItem(
        EditableList.TreeItemData item, int index, MenuItem menuItem)
    {
        if (!await Auth.IsAdmin())
            return false;

        await CommandExecutor.Execute(new CreateCourseCommand(item.Name));
        await RefreshView();

        return true;
    }

    private async Task OnRemoveCourseItem(EditableList.TreeItemData item, MenuItem menuItem) =>
        await ExecuteAdminViewAction(() => CommandExecutor.Execute(
            new RemoveCourseCommand(item.Id)));

    private async Task OnCourseItemClick(EditableList.TreeItemData item)
    {
        Navigation.NavigateTo($"courses/{item.Id}");
    }

    private EditableList.TreeItemData CreateCustomItemData(int index)
    {
        return new CourseItemData("", "New Course", "");
    }

    private MenuItem[] CoursesMenuItemsRoot = new MenuItem[]
    {
        MenuItems.AddChildAsLast,
        MenuItems.AddChildAsFirst
    };

    private MenuItem[] CourseMenuItems = new MenuItem[]
    {
        MenuItems.AddSibling,
        MenuItems.Remove
    };

    #endregion 

    #region Archived Courses

    private MenuItem[] ArchivedCourseMenuItems = new MenuItem[]
    {
        MenuItems.AddSibling with { Name = "Restore" },
    };

    #endregion

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetCoursesQuery, GetCoursesQueryResponse>();

        _dto = response.Content;

        _coursesListItems = _dto.Courses?.Select(c => new CourseItemData(c.Id, c.Name, ""))?.ToList();
        _coursesArchivedListItems = _dto.CoursesArchived?.Select(c => new CourseItemData(c.Id, c.Name, ""))?.ToList();
    }

    public class CourseItemData : EditableList.TreeItemData
    {
        public string Author { get; }

        public CourseItemData(string id, string name, string author) : base(id, name)
        {
            Author = author;
        }
    }
}
