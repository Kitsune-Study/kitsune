@using Manabu.UI.Common.State;
@using Manabu.UseCases.Content.FlashcardLists;

<div>
    @*<MudExpansionPanels DisableBorders="true" Elevation="0"
                        Style="width: 300px; gap: 10px;">
        <MudExpansionPanel Text="Flashcards">
            
        </MudExpansionPanel>
    </MudExpansionPanels>*@

    <MudButton Variant=@Variant.Filled DisableElevation=true OnClick="@(() => OpenDrawer(Anchor.End))" Class="action-button">
        Flashcards
    </MudButton>

    <MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary" Width="300px"
        Style="position:fixed;height: 100vh; top: 0; display: flex; justify-content: start;">
        <MudDrawerHeader Style="flex-direction: column; gap: 5px;">
            <MudText Typo="Typo.h6">Flashcards</MudText>
            <MudDivider />
        </MudDrawerHeader>
        <MudStack Style="padding-left: 25px; padding-right: 25px;">
            <MudText>Generate flashcards of desired type and mode</MudText>
            <MudSelect @ref=_typeSelect T="string" Label="Item" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var value in _itemValues)
                {
                    <MudSelectItem T="string" Value="@value" />
                }
            </MudSelect>
            <MudSelect @ref=_modeSelect T="string" Label="Mode" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var value in _modeValues)
                {
                    <MudSelectItem T="string" Value="@value" />
                }
            </MudSelect>
            <MudButton Variant="Variant.Filled" DisableElevation=true OnClick=@OnItemClick Class="action-button">Go</MudButton>
        </MudStack>
    </MudDrawer>
</div>

@code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public IQueryExecutor QueryExecutor { get; set; }

    [Inject] public State.FlashcardList _flashcardListState { get; set; }

    [Parameter] public string RootItemId { get; set; }
    [Parameter] public string RootItemType { get; set; }

    private List<string> _itemValues = new() { "Phrase" };
    private List<string> _modeValues = new() { "Reading", "Listening", "Speaking", "Writing" };

    private MudSelect<string>? _typeSelect;
    private MudSelect<string>? _modeSelect;

    bool open;
    Anchor anchor;

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        _typeSelect.SelectedValues = new string[] { _itemValues.FirstOrDefault() };
        _modeSelect.SelectedValues = new string[] { _modeValues.FirstOrDefault() };
    }

    private async Task OnItemClick(MouseEventArgs args)
    {
        var itemType = _typeSelect.SelectedValues.FirstOrDefault().ToLower();
        var mode = _modeSelect.SelectedValues.FirstOrDefault().ToLower();
        var response = await QueryExecutor.Execute<GetFlashcardListQuery, GetFlashcardListQueryResponse>(
            new GetFlashcardListQuery(RootItemId, RootItemType, itemType, mode));

        _flashcardListState.Items = response.Content.ItemIds
            .Select(id => new FlashcardList.Flashcard(id, null, itemType, mode)).ToArray();

        Navigation.NavigateTo($"/flashcard?itemType={itemType}&mode={mode}&itemId={RootItemId}");
    }
}
