@using Corelibs.Basic.Blocks;
@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UI.Common.Operations;
@using Manabu.UI.Common.State;
@using Manabu.UseCases.Conversations;
@using Manabu.UseCases.Lessons;
@using Manabu.UseCases.Phrases;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_conversation is null) { return; }

<div class="main-section lesson" style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <MudStack>
        <TextField
            Label="Name"
            IsReadonly=@(!IsEdit)
            Value=@_conversation.Name 
            OnEdit=@OnNameEdit />

        <TextField 
            Label="Description"
            IsReadonly=@(!IsEdit)
            Value=@GetDescription() 
            OnEdit=@OnDescriptionEdit />
    </MudStack>

    <EditableList
        @ref=@_phrasesTreeView
        Name="Phrases"
        IsReadonly=@(!IsEdit)
        NoIndents=true
        TreeItems=@(_phrasesTreeItems.CastToList<EditableList.TreeItemData>())
        OnItemClick=@OnItemClick
        OnAddItem=@OnAddItem
        OnMoveItem=@OnMovePhraseItem
        OnCutItem=@OnPhraseItemCut
        OnMenuItemClick=@OnPhraseMenuItemClick
        MenuItemsRoot=@(PhrasesMenuItemsRoot.ToArray())
        MenuItemsForAll=@(PhraseMenuItems.ToArray())
        NumberPrefix=true >
    
        <CustomItemTemplate>
            @{
                var phraseItem = context as PhraseTreeItemData;
                string indexStr = context.GetIndexStr(_phrasesTreeView.TreeItems);

                <PhraseItem 
                    Id=@context.Id
                    IsReadonly=@(!IsEdit)
                    Content=@(context.Name)
                    ShowSpeaker=@IsSpeakersShown.Value
                    SpeakerName=@phraseItem.SpeakerName
                    SpeakerTranslation=@phraseItem.SpeakerTranslation
                    OnPhraseSubmit=@OnPhraseSubmit
                    OnSpeakerTranslationSubmit=@OnSpeakerTranslationSubmit
                    OnSpeakerSubmit=@OnSpeakerSubmit />
            }
        </CustomItemTemplate>
    </EditableList>

    @{
        var haveNoSpeakers = _phrasesTreeItems.All(p => p.SpeakerName.IsNullOrEmpty() && p.SpeakerTranslation.IsNullOrEmpty());
        if (!haveNoSpeakers)
        {
            <MudSwitch @bind-Checked=@IsSpeakersShown.Value Label="Show Speakers" Color="Color.Info" />
        }
    }

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }
</div>

@code {
    [Parameter] public string ConversationId { get; set; }

    [Inject] public State.SiteTitle SiteTitle { get; set; }
    [Inject] public CutCopyPhraseOperation CutCopyPhraseOperation { get; set; }
    [Inject] public IsSpeakersShown IsSpeakersShown { get; set; }

    private EditableList? _phrasesTreeView;
    private List<PhraseTreeItemData> _phrasesTreeItems;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private ConversationDetailsDTO? _conversation;

    private const char PhraseTrailingMark = '-';

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("CONVERSATION");

        if (_conversation is null)
            return;

        //_breadcrumbs.Add(new("Courses", href: "/courses"));
        //_breadcrumbs.Add(new(_conversation.Courses[0].Name, href: $"/courses/{_conversation.Courses[0].Id}"));
        //_breadcrumbs.Add(new("Conversations", "", disabled: true));
        //_breadcrumbs.Add(new(_conversation.Name, href: _conversation.Id));
    }

    protected override async Task OnAfterRenderAsyncImpl(bool firstRender)
    {
        if (!firstRender)
            return;

        if (await CutCopyPhraseOperation.IsOngoing())
        {
            PhraseMenuItems.Add(MenuItems.Paste);
            PhrasesMenuItemsRoot.Add(MenuItems.Paste);
        }
    }

    public async Task OnPhraseMenuItemClick(EditableList.TreeItemData item, MenuItem menuItem)
    {
        if (menuItem.Id == MenuItems.Paste.Id)
        {
            var result = await CutCopyPhraseOperation.Paste(async data =>
                await ExecuteAdminViewAction(() => CommandExecutor.Execute(
                    new MovePhraseCommand(data.PhraseIds, data.CurrentConversationId, ConversationId, item is null ? int.MaxValue : item.Index + 1))));

            if (result)
                _phrasesTreeView.TreeItems.Remove(item);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPhraseItemCut(EditableList.TreeItemData[] items)
    {
        PhraseMenuItems.Add(MenuItems.Paste);
        PhrasesMenuItemsRoot.Add(MenuItems.Paste);

        var phraseIds = items.Select(i => i.Id).ToArray();
        await CutCopyPhraseOperation.Cut(phraseIds, ConversationId);
    }

    private async Task<bool> OnMovePhraseItem(EditableList.TreeItemData item, int index, MenuItem menuItem) =>
        await ExecuteAdminViewAction(() => CommandExecutor.Execute(
            new ReorderConversationPhraseCommand(ConversationId, item.Id, index)));

    private Task<bool> OnNameEdit(string text) =>
        ExecuteUpdateCommand(() => _conversation with { Name = text });

    private Task<bool> OnDescriptionEdit(string text) =>
        ExecuteUpdateCommand(() => _conversation with { Description = text });

    private async Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, MenuItem menuItem)
    {
        if (!_isAdmin)
            return false;

        if (menuItem.IdSecondary == "addPhrase")
            await CommandExecutor.Execute(new CreatePhraseCommand(item.Name, _conversation?.Id, index));

        return await RefreshView();
    }

    private Task<bool> OnPhraseSubmit(string id, string text) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateConversationPhraseCommand(
            id, ConversationId: _conversation?.Id, Original: text)));

    private Task<bool> OnSpeakerSubmit(string id, string name) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateConversationPhraseCommand(
            id, ConversationId: _conversation?.Id, Speaker: name)));

    private Task<bool> OnSpeakerTranslationSubmit(string id, string name) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateConversationPhraseCommand(
        id, ConversationId: _conversation?.Id, SpeakerTranslation: name)));

    private async Task OnItemClick(EditableList.TreeItemData item)
    {
        Navigation.NavigateTo($"phrases/{item.Id}");
    }

    private async Task<bool> ExecuteUpdateCommand(Func<ConversationDetailsDTO> createDto)
    {
        if (!_isAdmin)
            return false;

        var dto = createDto();
        var result = await CommandExecutor.Execute(new UpdateConversationCommand(
            dto.Id, dto.Name, dto.Description));

        await RefreshView();

        return result.IsSuccess;
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetConversationQuery, GetConversationQueryResponse>(
            new GetConversationQuery(ConversationId));

        _conversation = response?.Content;

        _phrasesTreeItems = _conversation?.Phrases?.SelectOrDefault((p, i) =>
            new PhraseTreeItemData(p.Id, p.Original, p.Speaker, p.SpeakerTranslation)).ToList();
    }

    private string GetDescription() =>
        !_conversation.Description.IsNullOrEmpty() ?
            _conversation.Description :
            "No Description";

    private List<MenuItem> PhrasesMenuItemsRoot = new()
    {
        MenuItems.AddChildAsLast with { Name = "Add Phrase", IdSecondary = "addPhrase"},
        MenuItems.AddChildAsFirst with { Name = "Add Phrase at Start", IdSecondary = "addPhrase" },
        MenuItems.Select,
        MenuItems.Cut
    };

    private List<MenuItem> PhraseMenuItems = new()
    {
        MenuItems.AddSibling with { Name = "Add Phrase", IdSecondary = "addPhrase"},
        MenuItems.MoveDown,
        MenuItems.MoveUp,
        MenuItems.Cut,
    };

    class PhraseTreeItemData : EditableList.TreeItemData
    {
        public PhraseTreeItemData(
            string id,
            string phrase,
            string speakerName,
            string speakerTranslation) : base(id, phrase)
        {
            SpeakerName = speakerName;
            SpeakerTranslation = speakerTranslation;
        }

        public string SpeakerName { get; }
        public string SpeakerTranslation { get; }
    }
}
