@using Corelibs.Basic.Blocks;
@using Corelibs.Basic.Reflection;
@using Corelibs.Basic.Collections;
@using Manabu.UI.Common.Operations;
@using Manabu.UseCases.Conversations;
@using Manabu.UseCases.Lessons;
@using Manabu.UseCases.Phrases;
@using Microsoft.AspNetCore.Components.Authorization;

@inherits CoreComponent

@if (_conversation is null) { return; }

<MudStack Class="main-section lesson" Style="width: 100%;">
    <SiteTitle>@SiteTitle.Name</SiteTitle>

    <MudBreadcrumbs Items=@_breadcrumbs Style="padding-left: 0; font-size: 12px" />

    <MudStack>
        <TextField
            Label="Name"
            IsReadonly=@(!_isEdit)
            Value=@_conversation.Name 
            OnEdit=@OnNameEdit />

        <TextField 
            Label="Description"
            IsReadonly=@(!_isEdit)
            Value=@GetDescription() 
            OnEdit=@OnDescriptionEdit />
    </MudStack>

    <EditableList
        Name="Phrases"
        IsReadonly=@(!_isEdit)
        NoIndents=true
        TreeItems=@(_phrasesTreeItems.CastToList<EditableList.TreeItemData>())
        OnItemClick=@OnItemClick
        OnAddItem=@OnAddItem
        OnMenuItemClick=@OnPhraseMenuItemClick
        MenuItemsRoot=@(PhrasesMenuItemsRoot.ToArray())
        MenuItemsForAll=@(PhraseMenuItems.ToArray())
        NumberPrefix=true >
    
        <CustomItemTemplate>
            @{
                var phraseItem = context as PhraseTreeItemData;
                string indexStr = context.GetIndexStr();

                <PhraseItem 
                    Id=@context.Id
                    IsReadonly=@(!_isEdit)
                    Content=@($"- {context.Name}")
                    ShowSpeaker=@_isSpeakersShown
                    SpeakerName=@phraseItem.SpeakerName
                    OnPhraseSubmit=@OnPhraseSubmit
                    OnSpeakerSubmit=@OnSpeakerSubmit />
            }
        </CustomItemTemplate>
    </EditableList>

    <MudSwitch @bind-Checked=@_isSpeakersShown Label="Show Speakers" Color="Color.Info" />

    @if (_isAdmin)
    {
        <MudSwitch @bind-Checked=@_isEdit Label="Edit Mode" Color="Color.Info" />
    }

</MudStack>

@code {
    [Parameter] public string ConversationId { get; set; }

    [Inject] public State.SiteTitle SiteTitle { get; set; }
    [Inject] public CutCopyPhraseOperation CutCopyPhraseOperation { get; set; }

    private List<PhraseTreeItemData> _phrasesTreeItems;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private ConversationDetailsDTO? _conversation;

    private bool _isSpeakersShown = true;

    protected override async Task OnInitializedAsyncImpl()
    {
        SiteTitle.Rename("CONVERSATION");

        if (_conversation is null)
            return;

        //_breadcrumbs.Add(new("Courses", href: "/courses"));
        //_breadcrumbs.Add(new(_conversation.Courses[0].Name, href: $"/courses/{_conversation.Courses[0].Id}"));
        //_breadcrumbs.Add(new("Conversations", "", disabled: true));
        //_breadcrumbs.Add(new(_conversation.Name, href: _conversation.Id));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (await CutCopyPhraseOperation.IsOngoing())
        {
            PhraseMenuItems.Add(MenuItems.Paste);
            PhrasesMenuItemsRoot.Add(MenuItems.Paste);
        }
    }

    public async Task OnPhraseMenuItemClick(EditableList.TreeItemData item, MenuItem menuItem)
    {
        if (menuItem.Id == MenuItems.Cut.Id)
        {
            PhraseMenuItems.Add(MenuItems.Paste);
            PhrasesMenuItemsRoot.Add(MenuItems.Paste);
            await CutCopyPhraseOperation.Cut(item.Id, ConversationId);
        }
        else if (menuItem.Id == MenuItems.Paste.Id)
            await CutCopyPhraseOperation.Paste(ConversationId, async data =>
                await ExecuteAdminViewAction(() => CommandExecutor.Execute(
                    new MovePhraseCommand(data.PhraseId, data.CurrentConversationId, ConversationId, (item?.Index ?? 0) + 1))));

        await InvokeAsync(StateHasChanged);

        //if (menuItem.Id == MenuItems.Cut.Id)
        //{
        //    EditState.EditOperation = new CutPasteOperation()
        //    {
        //        CurrentConversationId = ConversationId,
        //        PhraseId = item.Id
        //    };

        //    PhraseMenuItems.Add(MenuItems.Paste);
        //    PhrasesMenuItemsRoot.Add(MenuItems.Paste);
        //    await InvokeAsync(StateHasChanged);
        //}
        //else if (menuItem.Id == MenuItems.Paste.Id)
        //{
        //    if (EditState.EditOperation is not CutPasteOperation op)
        //        return;

        //    EditState.EditOperation = null;

        //    await ExecuteAdminViewAction(() => CommandExecutor.Execute(
        //        new MovePhraseCommand(
        //            op.PhraseId, op.CurrentConversationId, ConversationId, item.Index + 1)));
        //}
    }

    private Task<bool> OnNameEdit(string text) =>
        ExecuteUpdateCommand(() => _conversation with { Name = text });

    private Task<bool> OnDescriptionEdit(string text) =>
        ExecuteUpdateCommand(() => _conversation with { Description = text });

    private async Task<bool> OnAddItem(
        EditableList.TreeItemData item, int index, MenuItem menuItem)
    {
        if (!_isAdmin)
            return false;

        if (menuItem.IdSecondary == "addPhrase")
            await CommandExecutor.Execute(new CreatePhraseCommand(item.Name, _conversation?.Id, index));

        return await RefreshView();
    }

    private Task<bool> OnPhraseSubmit(string id, string text) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateConversationPhraseCommand(
            id, ConversationId: _conversation?.Id, Original: text)));

    private Task<bool> OnSpeakerSubmit(string id, string name) =>
        ExecuteAdminViewAction(() => CommandExecutor.Execute(new UpdateConversationPhraseCommand(
            id, ConversationId: _conversation?.Id, Speaker: name)));

    private async Task OnItemClick(EditableList.TreeItemData item)
    {
        Navigation.NavigateTo($"phrases/{item.Id}");
    }

    private async Task<bool> ExecuteUpdateCommand(Func<ConversationDetailsDTO> createDto)
    {
        if (!_isAdmin)
            return false;

        var dto = createDto();
        var result = await CommandExecutor.Execute(new UpdateConversationCommand(
            dto.Id, dto.Name, dto.Description));

        await RefreshView();

        return result.IsSuccess;
    }

    protected override async Task RefreshViewModel()
    {
        var response = await QueryExecutor.Execute<GetConversationQuery, GetConversationQueryResponse>(
            new GetConversationQuery(ConversationId));

        _conversation = response?.Content;

        _phrasesTreeItems = _conversation?.Phrases?.SelectOrDefault((p, i) =>
            new PhraseTreeItemData(p.Id, p.Original, p.Speaker)).ToList();
    }

    private string GetDescription() =>
        !_conversation.Description.IsNullOrEmpty() ?
            _conversation.Description :
            "No Description";

    private List<MenuItem> PhrasesMenuItemsRoot = new()
    {
        MenuItems.AddChildAsLast with { Name = "Add Phrase", IdSecondary = "addPhrase"},
        MenuItems.AddChildAsFirst with { Name = "Add Phrase at Start", IdSecondary = "addPhrase" },
    };

    private List<MenuItem> PhraseMenuItems = new()
    {
        MenuItems.AddSibling with { Name = "Add Phrase", IdSecondary = "addPhrase"},
        MenuItems.Cut,
    };

    class PhraseTreeItemData : EditableList.TreeItemData
    {
        public PhraseTreeItemData(
            string id,
            string phrase,
            string speakerName) : base(id, phrase)
        {
            SpeakerName = speakerName;
        }

        public string SpeakerName { get; }
    }
}
