@page "/words/themes"
@using Manabu.UI.Common.Components
@using Manabu.UI.Common.State

@inherits CoreComponent

<style>
    .bg {
        background-image: url('_content/Manabu.UI.Common/images/wall.jpg'); 
        background-repeat: repeat-y;
        background-size: cover; 
        opacity: 0.2;
    }

    .bg-settings {
        background-image: url('_content/Manabu.UI.Common/images/wall.jpg'); 
        background-repeat: repeat-y;
        background-size: cover; 
    }

    .anim {
        position: relative;
    }

    .btn-bg {
        background-image: url('_content/Manabu.UI.Common/images/wall.jpg');
        background-size: cover;
        opacity: 1;
        filter: brightness(20%);
    }

    .neon-button {
        width: calc(100% + 1px);
        height: calc(100% + 1px);
        border: red 2px solid;
        box-shadow: inset 0 0 0.5em 0 red, 0 0 0.5em 0 red;
    }

    @@keyframes glow {
        from {
            text-shadow: 0px 0px 5px black
        }

        to {
            text-shadow: 2px 2px 15px black
        }
    }
</style>

@* <MudStack Row=true Class="flex flex-wrap">
        <MudTooltip Text="Add Phrase">
            <MudIconButton Icon="@Icons.Material.Outlined.AddBox" aria-label="delete" />
        </MudTooltip>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudTooltip Text="Multiselect">
            <MudIconButton Icon="@Icons.Material.Outlined.SelectAll" aria-label="delete" />
        </MudTooltip>
        <MudTooltip Text="Edit">
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" aria-label="delete" />
        </MudTooltip>
        <MudTooltip Text="Cut">
            <MudIconButton Icon="@Icons.Material.Outlined.ContentCut" aria-label="delete" />
        </MudTooltip>
        <MudTooltip Text="Copy All">
            <MudIconButton Icon="@Icons.Material.Outlined.CopyAll" aria-label="delete" />
        </MudTooltip>
        <MudTooltip Text="Paste">
            <MudIconButton Icon="@Icons.Material.Outlined.ContentPaste" aria-label="delete" />
        </MudTooltip>
        <MudTooltip Text="Settings">
            <MudIconButton Icon="@Icons.Material.Outlined.Settings" aria-label="delete" />
        </MudTooltip>
        <MudTooltip Text="Display Settings">
            <MudIconButton Icon="@Icons.Material.Outlined.Create" aria-label="delete" />
        </MudTooltip>
    </MudStack> *@

<div class="word-themes w-full h-full flex flex-col gap-5 items-center mb-10 top-[72px] pt-5">
    @if (!_drawerOpen)
    {
        <MudIconButton Icon=@Icons.Material.Filled.Settings 
            OnClick=@(() => _drawer.Open = true )
            Class="fixed z-30 settings-button top-[75px] usmx:top-[11px] right-[15px] hover:brightness-80" />
    }

    @* <button class="fixed bg-red-200 h-[30px] w-[30px] border-none brightness-50 z-20 hover:brightness-[1.75]" style="filter: brightness(0)"></button> *@
        
    <div class="scroll-enabler absolute h-full w-full"></div>
    <div class="relative">
        <MudText Class="font-bold text-4xl mb-5 usmx:text-3xl w-full text-center">Words By Theme</MudText>
        <MudText Class="text-md z-10 text-center">
            &nbsp;&nbsp;&nbsp;&nbsp; Initial lists contain basic vocabulary grouped by theme. It overlaps with JLPT level words starting from N5 level, but might include more similar words, so
            it can be learned at the same time.
        </MudText>
    </div>
    
    <div class="relative flex flex-col items-center gap-3 mt-10">
        <div class="relative flex w-full items-center gap-4">
            <MudDivider Class="border-gray-400 bottom-0 shrink" />
            <MudText Class="font-bold text-2xl text-left z-10 text-center">Numbers</MudText>
            <MudDivider Class="border-gray-400 bottom-0 shrink" />
        </div>
        <div class="flex flex-col gap-2">
            <MudText Class="font-bold text-lg text-left z-10 text-center">Digits</MudText>
            <div class="relative w-full h-full flex flex-wrap gap-7 items-center justify-center py-3">
                <WordTile
                    MainText="零"
                    MeaningText="zero"
                    HiraganaText="れい"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="一"
                    MeaningText="one"
                    HiraganaText="いち"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />
            
                <WordTile
                    MainText="二"
                    MeaningText="two"
                    HiraganaText="に"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="三"
                    MeaningText="three"
                    HiraganaText="さん"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="四"
                    MeaningText="four"
                    HiraganaText="よん"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="五"
                    MeaningText="five"
                    HiraganaText="ご"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="六"
                    MeaningText="six"
                    HiraganaText="ろく"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="七"
                    MeaningText="seven"
                    HiraganaText="なな"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="八"
                    MeaningText="eight"
                    HiraganaText="はち"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="九"
                    MeaningText="nine"
                    HiraganaText="きゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="十"
                    MeaningText="ten"
                    HiraganaText="じゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />
        </div>
        <div class="flex flex-col gap-2">
            <MudText Class="font-bold text-lg text-left z-10 text-center">Tens</MudText>
            <div class="relative w-full h-full flex flex-wrap gap-7 items-center justify-center py-3">
                <WordTile
                    MainText="二十"
                    MeaningText="twenty"
                    HiraganaText="にじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="三十"
                    MeaningText="thirty"
                    HiraganaText="さんじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="四十"
                    MeaningText="forty"
                    HiraganaText="よんじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="五十"
                    MeaningText="fifty"
                    HiraganaText="ごじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="六十"
                    MeaningText="sixty"
                    HiraganaText="ろくじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="七十"
                    MeaningText="seventy"
                    HiraganaText="ななじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="八十"
                    MeaningText="eighty"
                    HiraganaText="はちじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />

                <WordTile
                    MainText="九十"
                    MeaningText="ninety"
                    HiraganaText="きゅうじゅう"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />
            </div>
        </div>

        <div class="flex flex-col gap-2">
            <MudText Class="font-bold text-lg text-left z-10 text-center">Big Numbers</MudText>
            <div class="relative w-full h-full flex flex-wrap gap-7 items-center justify-center py-3">
                <WordTile
                    MainText="百"
                    MeaningText="hundred"
                    HiraganaText="ひゃく"
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				    MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet)
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet)
                />
            </div>
        </div>

            @* <div class="absolute bg-slate-800 w-[100000px] h-full `top-[100px] -z-10" /> *@
           @*  @for (int i = 0; i < 50; i++) 
            {
                <WordTile
                    MainText=@GetRandomKanji()
                    MeaningText=@GetRandomNoun()
                    HiraganaText=@GetRandomJLPTN5Word()
                    OriginalEnabled=@(IsOriginalShown.Value || !IsOriginalShown.IsSet)
				MeaningEnabled=@(IsMeaningsShown.Value || !IsMeaningsShown.IsSet) 
                    HiraganaEnabled=@(IsReadingsShown.Value || !IsReadingsShown.IsSet) />
            }*@
        </div> 
    </div>

    @* <div class="flex flex-col gap-15">
        <div class="flex gap-10">
            <div>
                <div class="
                relative w-[65px] flex flex-col h-[65px]
                items-center justify-center
                transition transform duration-150 hover:scale-[1.25]
                hover:font-bold">
                    <h5 class="anim text-black cursor-pointer
                    -translate-y-[5px]"
                        style=@($@"
                        font-family: kaisei;
                        font-size: 80px;
                        z-index: 10;
                        text-shadow: 0 0 10px gray;")>
                        @GetRandomKanji()
                    </h5>
                    @if (IsMeaningsShown.Value)
                    {
                        @* <h6 class="">@GetRandomNoun()</h6> 
                    }
                </div>
            </div>
            <div class="flex flex-col">
                <MudText style="position:relative; z-index:10; cursor-pointer">Lorem ipsum dolor sit amet, </MudText>
                <MudText style="position:relative; z-index:10; cursor-pointer">Lorem ipsum dolor siim ad minim veniamercitation ullamco laboris</MudText>
                <MudText style="position:relative; z-index:10; cursor-pointer">Lorem ipor incididuniqua.llamco laboris</MudText>
            </div>
        </div>
    </div> 
    *@

    <div class="fixed h-full top-0 right-0">
        <MudDrawer @ref=_drawer @bind-Open=@_drawerOpen Fixed=false Elevation=1 Anchor=@Anchor.Right
            Variant=@DrawerVariant.Temporary
            Class="relative right-0 z-30 h-full">
            <div class="absolute bg-settings w-full h-full opacity-25" />
            <MudDrawerHeader Class="fixed flex flex-col">
                <MudText Typo=@Typo.h6 Class="font-bold mb-5">Settings</MudText>
                <div class="flex flex-col w-full">
                    <MudSwitch @bind-Checked=@IsOriginalShown.Value Label="Show Originals" Color="Color.Info" Class="w-fit" />
                    <MudSwitch @bind-Checked=@IsMeaningsShown.Value Label="Show Meanings" Color="Color.Info" Class="w-fit" />
                    <MudSwitch @bind-Checked=@IsReadingsShown.Value Label="Show Readings" Color="Color.Info" Class="w-fit" />
                </div>
            </MudDrawerHeader>
        </MudDrawer>
    </div>
</div>

@code {
    bool _drawerOpen;
    private MudDrawer _drawer;

    [Inject] public WordThemes_IsOriginalShown IsOriginalShown { get; set; }
    [Inject] public WordThemes_IsMeaningsShown IsMeaningsShown { get; set; }
    [Inject] public WordThemes_IsReadingsShown IsReadingsShown { get; set; }

    // public void Dispose()
    // {
    //     IsMeaningsShown.OnValueChanged -= OnMeaningsShownValueChanged;
    //     IsReadingsShown.OnValueChanged -= OnReadingsShownChanged;
    // }

    // private async Task OnMeaningsShownValueChanged(bool value) => await RefreshView();
    // private async Task OnReadingsShownChanged(bool value) => await RefreshView();

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.RightToLeft && !_drawerOpen)
        {
            _drawerOpen = true;
            StateHasChanged();
        }
        else if (direction == SwipeDirection.LeftToRight && _drawerOpen)
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }

    static string GetRandomKanji()
    {
        var random = new Random();
        int randomCodePoint = random.Next(0x4E00, 0x4EFF);
        char randomKanji = Convert.ToChar(randomCodePoint);
        return randomKanji.ToString();
    }

    static string GetRandomNoun()
    {
        string[] nouns = {
            "cat", "dog", "apple", "book", "tree", "computer", "flower", "coffee", "moon", "mountain",
            "ocean", "car", "house", "music", "guitar", "sun", "rainbow", "friend", "pizza", "beach",
            "garden", "cloud", "star", "bird", "dragon", "island", "river", "unicorn", "key", "door",
            "time", "mirror", "sky", "fire", "ice cream", "wizard", "dream", "adventure", "robot", "puzzle",
            "sunset", "candle", "magic", "serenity", "treasure", "jungle", "laughter", "butterfly", "dolphin",
            "whale", "castle", "chocolate", "journey", "moonlight", "swan", "feather", "harmony", "sapphire",
            "thunder", "lighthouse", "harbor", "breeze", "cosmos", "mystery", "whisper", "zeppelin", "carousel"
        };

        var random = new Random();
        int randomIndex = random.Next(0, nouns.Length);
        return nouns[randomIndex];
    }

    static string GetRandomJLPTN5Word()
    {
        string[] jlptN5WordsHiragana = {
            "こんにちは", "ありがとう", "がっこう", "べんきょう", "たべる", "のむ", "いぬ", "ねこ", "ともだち", "かぞく",
            "とけい", "はな", "やま", "かわ", "あめ", "はれ", "くもり", "あかい", "あおい", "しろい",
            "くろい", "あたらしい", "ふるい", "おおきい", "ちいさい", "じょうず", "へた", "うれしい", "かなしい", "げんき",
            "びょうき", "いく", "くる", "みる", "きく", "はなす", "よむ", "かく", "かう", "うる",
            "もつ", "つかう", "おしえる", "ならう", "しる", "あう", "まつ", "とぶ", "およぐ", "はしる"
        };

        var random = new Random();
        int randomIndex = random.Next(0, jlptN5WordsHiragana.Length);
        return jlptN5WordsHiragana[randomIndex];
    }

    string GetRandomAnimClass()
    {
        string[] animClasses = { "anim", "anim2", "anim3", "anim4", "anim5" };
        var random = new Random();
        int index = random.Next(animClasses.Length);
        return animClasses[index];
    }
}
