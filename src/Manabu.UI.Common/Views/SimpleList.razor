@using Corelibs.Basic.Maths;
@using Corelibs.Blazor.UIComponents.Common;
@using Manabu.UI.Common.Components

@inherits BaseElement

<div class="list @(@class)" style=@style>
    @{
        bool showName = !Name.IsNullOrEmpty();
        bool showMenu = !MenuItemsRoot.IsNullOrEmpty() && !IsReadonly;
    }
    @if (showName || showMenu)
    {
        <div class="toolbar">
            @if (showName)
            {
                <h3 class="title">@Name</h3>
            }

            @if (showMenu)
            {
                <MudMenu Label="MENU"
                         Style=""
                         Class="menu-btn">

                    @foreach (var menuItem in MenuItemsRoot)
                    {
                        <MudMenuItem Style="font-family: unica;"
                                     OnClick=@(args => OnMenuItemClickInternal(args, null, menuItem))>@menuItem.Name</MudMenuItem>
                    }

                </MudMenu>
            }
        </div>
    }

    @foreach (var item in Items)
    {
        if (item.IsEdit)
        {
            <TextField 
                IsEditing=true
                Value=@item.Name
                OnBlur=@OnEditableItemBlur
                OnEdit=@(text => 
                {
                    item.Name = text;
                    return OnAddItemTextFieldValueChanged(item);
                }) />
        }
        else
        {
            if (CustomItemTemplate is null)
            {
                <div class="list-item" @onclick=@(() => OnItemClickInternal(item))>
                    <span>@item.Name</span>
                </div>
            }
            else
            {
                <div class="list-item" @onclick=@(() => OnItemClickInternal(item))>
                    @CustomItemTemplate(item)
                </div>
            }
        }
    }

</div>

@code {
    public delegate Task OnClickDelegate(ItemData item);
    public delegate Task<bool> OnAddDelegate(ItemData item, int index, MenuItem menuItem);
    public delegate Task OnRemoveDelegate(ItemData item, MenuItem menuItem);
    public delegate Task<bool> OnMoveDelegate(ItemData item, int index, MenuItem menuItem);
    public delegate Task OnMenuItemClickDelegate(ItemData item, MenuItem menuItem);
    public delegate ItemData CreateCustomItemDataDelegate(int index);

    [Parameter] public string Name { get; set; }
    [Parameter] public List<ItemData> Items { get; set; }

    [Parameter] public RenderFragment<ItemData> CustomItemTemplate { get; set; }
    [Parameter] public CreateCustomItemDataDelegate CreateCustomItemData { get; set; }

    [Parameter] public OnAddDelegate OnAddItem { get; set; }
    [Parameter] public OnRemoveDelegate OnRemoveItem { get; set; }
    [Parameter] public OnMoveDelegate OnMoveItem { get; set; }
    [Parameter] public OnClickDelegate OnItemClick { get; set; }
    [Parameter] public OnMenuItemClickDelegate OnMenuItemClick { get; set; }

    [Parameter] public MenuItem[] MenuItemsRoot { get; set; }
    [Parameter] public MenuItem[] MenuItemsChildren { get; set; }

    [Parameter] public bool IsReadonly { get; set; }

    private MenuItem _selectedMenuItem;

    private void OnEditableItemBlur()
    {
        ClearItemsWithNoIds();
        InvokeAsync(StateHasChanged);
    }

    private void ClearItemsWithNoIds()
    {
        Items = Items.Where(si => !si.Id.IsNullOrEmpty()).ToList();
    }

    private Task OnItemClickInternal(ItemData item)
    {
        return UIComponent.InvokeBool(OnItemClick, item)();
    }

    private Task<bool> OnAddInternal(ItemData item, int index, MenuItem menuItem)
    {
        return UIComponent.InvokeBool(OnAddItem, item, index, menuItem)();
    }

    private Task OnRemoveInternal(ItemData item, MenuItem menuItem)
    {
        return UIComponent.InvokeBool(OnRemoveItem, item, menuItem)();
    }

    private Task<bool> OnMoveInternal(ItemData item, int index, MenuItem menuItem)
    {
        return UIComponent.InvokeBool(OnMoveItem, item, index, menuItem)();
    }

    private async Task<bool> OnAddItemTextFieldValueChanged(ItemData item)
    {
        var i = Items.IndexOf(item);

        var result = await UIComponent.InvokeBool(OnAddItem, item, i, _selectedMenuItem)();

        if (item.Id.IsNullOrEmpty())
            item.Id = item.Name;

        item.IsEdit = false;

        return result;
    }

    protected async Task<bool> OnMenuItemClickInternal(
        MouseEventArgs args,
        ItemData item,
        MenuItem menuItem)
    {
        _selectedMenuItem = menuItem;

        if (menuItem.Id == MenuItems.AddSibling.Id ||
            menuItem.Id == MenuItems.AddChildAsFirst.Id ||
            menuItem.Id == MenuItems.AddChildAsLast.Id ||
            menuItem.Id == MenuItems.Add.Id)
        {
            if (menuItem.Id == MenuItems.AddSibling.Id)
            {
                var i = Items.IndexOf(item) + 1;

                var newItem = CreateCustomItemData is not null ? CreateCustomItemData(i) :
                    new ItemData("New Item..");

                newItem.IsEdit = true;

                Items.Insert(i, newItem);
            }
            else
            {
                int i = menuItem.Id == MenuItems.AddChildAsFirst.Id ? 0 : Items.Count;

                var newItem = CreateCustomItemData is not null ? CreateCustomItemData(i) :
                    new ItemData("New Item..");

                newItem.IsEdit = true;

                Items.Insert(i, newItem);
            }
        }
        else
        if (menuItem.Id == MenuItems.Remove.Id)
        {
            int i = Items.IndexOf(item);
            Items.Remove(item);
            if (!await UIComponent.InvokeBool(OnRemoveItem, item, menuItem)())
                Items.Insert(i, item);
        }
        else
        if (menuItem.Id == MenuItems.MoveUp.Id ||
            menuItem.Id == MenuItems.MoveDown.Id)
        {
            int index = Items.IndexOf(item);

            int newIndex = menuItem.Id == MenuItems.MoveUp.Id ? index - 1 : index + 1;
            newIndex = newIndex.Clamp(Items.Count);

            Items.Swap(index, newIndex);
            if (newIndex != index)
                if (!await UIComponent.InvokeBool(OnMoveItem, item, newIndex, menuItem)())
                    Items.Swap(index, newIndex);
        }
        else
        {
            await UIComponent.InvokeBool(OnMenuItemClick, item, menuItem)();
        }

        await InvokeAsync(StateHasChanged);

        return true;
    }

    public class ItemData
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public bool IsEdit { get; set; }

        public ItemData(string name, bool isEdit = false)
        {
            Id = name.ToLower();
            Name = name;
            IsEdit = isEdit;
        }

        public ItemData(string id, string name, bool isEdit = false)
        {
            Id = id;
            Name = name;
            IsEdit = isEdit;
        }
    }
}
