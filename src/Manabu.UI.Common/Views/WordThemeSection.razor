<div class="relative flex flex-col items-center">
    <div class="relative flex w-full items-center justify-center gap-4 py-3 cursor-pointer" @onclick=@(() => _sectionPanel?.ToggleExpansion())>
        @if (Layout == WordThemesSettings.LayoutType.Vertical)
        {
            <div class="absolute h-full w-[100000px] @Color -translate-[50%]  hover:brightness-75" style="box-shadow: 0 0 3px black;" />
        }
        else
        {

        }
        <MudText Class="font-bold text-2xl text-left z-10 text-center text-white uppercase">@Title</MudText>
    </div>
    <MudExpansionPanel IsExpandedChanged=@OnExpandedChanged @ref=_sectionPanel Text="" 
        Class="exp-panel bg-transparent" IsInitiallyExpanded=false Style="margin: 0; border: none;">
        @if (_isExpanded)
        {
            @ChildContent
        }
    </MudExpansionPanel>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Color { get; set; } = SectionColor.Red;
    [Parameter] public WordThemesSettings.LayoutType Layout { get; set; }

    private MudExpansionPanel? _sectionPanel;
    private bool _isExpanded;

    private async Task OnExpandedChanged(bool value) 
    {
        if (!value)
            Task.Run(async () => 
            {
                await Task.Delay(500);
                _isExpanded = value;
            });
        else
            _isExpanded = value;
    }

    public static class SectionColor
    {
        public const string Blue = "bg-blue-900";
        public const string Red = "bg-red-900";
        public const string Yellow = "bg-yellow-900";
        public const string Green = "bg-green-900";
    }
}
