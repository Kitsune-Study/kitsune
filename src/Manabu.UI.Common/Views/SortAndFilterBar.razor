@using System.Globalization;

<div class="d-flex flex-column">
    <div class="d-flex">
        @if (!_sortValues.IsNullOrEmpty() && _selectedValues.Where(v => v.Type is PropertyType.Sort).Count() < _sortValues.Count())
        {
            <MudTooltip Text="Sort">
                <MudMenu Icon=@Icons.Material.Filled.Sort Color=@Color.Error>
                    @foreach (var prop in _sortValues)
                    {
                        if (_selectedValues.FirstOrDefault(v => v.Type is PropertyType.Sort && v.Text == prop) != null)
                            continue;

                        <MudMenuItem OnClick=@(arg => OnSortPropertyAdd(arg, prop))>@prop</MudMenuItem>
                    }
                </MudMenu>
            </MudTooltip>
        }
        @if (!_filterValues.IsNullOrEmpty())
        {
            <MudTooltip Text="Filter">
                <MudMenu Icon=@Icons.Material.Filled.FilterAlt Color=@Color.Error>
                    @foreach (var prop in _filterValues)
                    {
                        if (_selectedValues.FirstOrDefault(v => v.Type is PropertyType.Filter && v.Text == prop.Value) != null)
                            continue;

                        <MudMenuItem OnClick=@(arg => OnFilterPropertyAdd(arg, prop.Value))>@prop.Value</MudMenuItem>
                    }
                </MudMenu>
            </MudTooltip>
        }
    </div>
    <div class="d-flex flex-column pl-3">
        @foreach (var value in _selectedValues)
        {
            if (value.Type is PropertyType.Sort)
            {
                <div class="d-flex align-center gap-3">
                    <MudText Style="font-family: unica; text-transform: uppercase; font-weight: bold; ">Sort</MudText>
                    <div class="d-flex align-center">
                        <MudChip Color=Color.Error Style="color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold; width: fit-content;" Icon=@Icons.Material.Filled.Sort OnClose=@(chip => OnPropertyClosed(chip, value))>@value.Text</MudChip>
                        <MudTooltip Text=@(value.Descending ? "Descending" : "Ascending")>
                            <MudChip Color=Color.Error 
                                Style="cursor: pointer; color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold; width: fit-content; padding: 0; padding-left: 8px; margin: 0;" 
                                Icon=@(value.Descending ? Icons.Material.Filled.ArrowDownward : Icons.Material.Filled.ArrowUpward)
                                OnClick=@(arg => OnChangeSortOrderType(arg, value)) />
                        </MudTooltip>
                    </div>
                </div>
            }
            else
            if (value.Type is PropertyType.Filter)
            {
                if (value.FilterDef is null)
                {
                    <div class="d-flex align-center gap-3">
                        <MudText Style="font-family: unica; text-transform: uppercase; font-weight: bold; ">Filter</MudText>
                        <div class="d-flex align-center">
                            <MudChip Color=Color.Error Style="color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold; width: fit-content;" Icon=@Icons.Material.Filled.FilterAlt OnClose=@(chip => OnPropertyClosed(chip, value))>@value.Text</MudChip>
                            <MudTextField T="string" Placeholder="Value" Adornment="Adornment.Start" Immediate="true" ValueChanged=@OnFilterValueChangedInternal Class="mt-0"
                                          Style="padding: 0; height: 20px; width: fit-content; font-weight: bold; min-width: fit-content; max-width: fit-content;" DisableUnderLine=true />

                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex align-center gap-3">
                        <MudText Style="font-family: unica; text-transform: uppercase; font-weight: bold;">Filter</MudText>
                        <div class="d-flex align-center">
                            <MudChip Color=Color.Error Style="color: white; font-family: unica; text-transform: uppercase; height: 20px; font-weight: bold; width: fit-content;" Icon=@Icons.Material.Filled.FilterAlt OnClose=@(chip => OnPropertyClosed(chip, value))>@value.Text</MudChip>
                            <MudSelect @ref=@value.Ref
                                T=string Label="" Variant=@Variant.Outlined AnchorOrigin=@Origin.BottomCenter Style="padding-left: 5px;">
                                @foreach (var defValue in value.FilterDef.Values)
                                {
                                    <MudSelectItem T=string Value=@defValue.Value />
                                }
                            </MudSelect>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter] public string[] SortProperties { get; set; } = Array.Empty<string>();
    private string[] _sortValues;

    [Parameter] public FilterDef[] FilterProperties { get; set; } = Array.Empty<FilterDef>();
    private FilterDef[] _filterValues;

    [Parameter] public EventCallback<List<Value>> OnValueChanged { get; set; }
    private List<Value> _selectedValues = new();

    protected override void OnInitialized()
    {
        _sortValues = SortProperties.ToArray();
        _filterValues = FilterProperties.ToArray();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var value in _selectedValues)
        {
            if (value.Type is not PropertyType.Filter ||
                value.Ref is null ||
                value.FilterDef.Values.IsNullOrEmpty())
                continue;

            value.Ref.SelectedValues = new string[] { value.FilterDef.Values.FirstOrDefault().Value };
        }
    }

    private async Task OnFilterValueChangedInternal(string value)
    {
        await OnValueChanged.InvokeAsync(_selectedValues);
    }

    private Task OnSortPropertyAdd(MouseEventArgs args, string value)
    {
        _selectedValues.Add(new(PropertyType.Sort, value));
        return InvokeAsync(StateHasChanged);
    }

    private Task OnChangeSortOrderType(MouseEventArgs args, Value value)
    {
        int index = _selectedValues.IndexOf(value);
        _selectedValues[index].Descending = !_selectedValues[index].Descending;
        return InvokeAsync(StateHasChanged);
    }

    private Task OnFilterPropertyAdd(MouseEventArgs args, string value)
    {
        var filterDef = FilterProperties.FirstOrDefault(v => v.Value == value);
        if (filterDef.Values.IsNullOrEmpty())
            _selectedValues.Add(new(PropertyType.Filter, value));
        else
        {
            _selectedValues.Add(new(PropertyType.Filter, value, descending: false, filterDef, filterDef.Values.First()));
        }

        return InvokeAsync(StateHasChanged);
    }

    void OnPropertyClosed(MudChip chip, Value value)
    {
        int index = _selectedValues.IndexOf(value);
        _selectedValues.RemoveAt(index);
    }

    public enum PropertyType
    {
        Sort,
        Filter
    }

    public record FilterDef(string Value, List<IdValue>? Values = null)
    {
        public static implicit operator FilterDef(string value) => new(value);
    };

    public record IdValue(string Id, string Value);

    public class Value
    {
        public PropertyType Type { get; }
        public string Text { get; }
        public bool Descending { get; set; }
        public FilterDef? FilterDef { get; }
        public IdValue? Selected { get; }
        public MudSelect<string>? Ref { get; set; }

        public Value(
            PropertyType type,
            string text,
            bool descending = false,
            FilterDef? filterDef = null,
            IdValue? selected = null,
            MudSelect<string>? @ref = null)
        {
            Type = type;
            Text = text;
            Descending = descending;
            FilterDef = filterDef;
            Selected = selected;
            Ref = @ref;
        }
    }
}
