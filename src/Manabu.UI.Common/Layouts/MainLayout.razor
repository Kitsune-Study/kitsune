@using Microsoft.AspNetCore.Components.Authorization;
@using Manabu.UseCases.Content.Users;
@inherits LayoutComponentBase

<MudThemeProvider Theme=@MyCustomTheme />
<MudDialogProvider/>
<MudSnackbarProvider/>

<main class="main">
    
    @*<TopAndSideMenu
        OnSideMenuSizeChanged=@OnMenuSizeChanged
        MenuIconUrl=@($"{Config.BaseAssetsPath}/images/icons/design/grid.png")
        LogoName="Manabu"
        LogoImageUrl=@($"{Config.BaseAssetsPath}/images/icons/design/mask.png")
        SideMenuButtonGroups=@SideMenuButtonGroups 
        TopMenuButtonGroups=@TopMenuButtonGroups 
        BottomLeftMenuButtonGroups=@BottomLeftMenuButtonGroups 
        OnButtonClick=@OnMenuButtonClick/>*@

    <div class=@(_layoutFree ? "main-content-free" : "main-content")>
        @Body
    </div>

    <MainMenu />

</main>

@code {
    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Lora", "Helvetica", "Arial", "sans-serif" },
            },
            Body1 = new Body1()
            {
                FontSize = "15px"
            },
            H3 = new H3()
            {
                FontFamily = new[] { "Lora", "Helvetica", "Arial", "sans-serif" },
            }
        }
    };

    [Inject] public AuthenticationStateProvider Auth { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }

    private bool _layoutFree;

    protected override async Task OnInitializedAsync()
    {
        var relative = Navigation.ToBaseRelativePath(Navigation.Uri);
        if (relative.IsEmpty())
            _layoutFree = true;

        await RedirectIfNotSignedIn();
        Navigation.LocationChanged += OnNavigationLocationChanged;
    }

    private async void OnNavigationLocationChanged(object sender, LocationChangedEventArgs args)
    {
        RedirectIfNotSignedIn();
        var relative = Navigation.ToBaseRelativePath(Navigation.Uri);
        _layoutFree = relative.IsEmpty();

        InvokeAsync(StateHasChanged);
    }

    private async Task RedirectIfNotSignedIn()
    {
        var relative = Navigation.ToBaseRelativePath(Navigation.Uri);
        if (relative.IsEmpty())
            return;
        
        var state = await Auth.GetAuthenticationStateAsync();
        if (IsPrivatePath(relative) && await Auth.IsSignedIn() is false)
        {
            Navigation.NavigateTo("/", forceLoad: true);
            return;
        }

        bool IsPrivatePath(string path)
        {
            if (relative.StartsWith("rehearse"))
            {
                return true;
            }

            return false;
        }
    }

    private async Task OnMenuButtonClick(string id)
    {
        if (id == "login")
        {
            await Auth.SignAction(Navigation);
        }
        else
            Navigation.NavigateTo(id);
    }
}
